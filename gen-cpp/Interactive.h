/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Interactive_H
#define Interactive_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "interactive_types.h"

namespace interactive {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class InteractiveIf {
 public:
  virtual ~InteractiveIf() {}
  virtual void query1(std::vector<Query1Response> & _return, const Query1Request& request) = 0;
  virtual void query2(std::vector<Query2Response> & _return, const Query2Request& request) = 0;
  virtual void query3(std::vector<Query3Response> & _return, const Query3Request& request) = 0;
  virtual void query4(std::vector<Query4Response> & _return, const Query4Request& request) = 0;
  virtual void query5(std::vector<Query5Response> & _return, const Query5Request& request) = 0;
  virtual void query6(std::vector<Query6Response> & _return, const Query6Request& request) = 0;
  virtual void query7(std::vector<Query7Response> & _return, const Query7Request& request) = 0;
  virtual void query8(std::vector<Query8Response> & _return, const Query8Request& request) = 0;
  virtual void query9(std::vector<Query9Response> & _return, const Query9Request& request) = 0;
  virtual void query10(std::vector<Query10Response> & _return, const Query10Request& request) = 0;
  virtual void query11(std::vector<Query11Response> & _return, const Query11Request& request) = 0;
  virtual void query12(std::vector<Query12Response> & _return, const Query12Request& request) = 0;
  virtual void query13(Query13Response& _return, const Query13Request& request) = 0;
  virtual void query14(std::vector<Query14Response> & _return, const Query14Request& request) = 0;
  virtual void shortQuery1(ShortQuery1Response& _return, const ShortQuery1Request& request) = 0;
  virtual void shortQuery2(std::vector<ShortQuery2Response> & _return, const ShortQuery2Request& request) = 0;
  virtual void shortQuery3(std::vector<ShortQuery3Response> & _return, const ShortQuery3Request& request) = 0;
  virtual void shortQuery4(ShortQuery4Response& _return, const ShortQuery4Request& request) = 0;
  virtual void shortQuery5(ShortQuery5Response& _return, const ShortQuery5Request& request) = 0;
  virtual void shortQuery6(ShortQuery6Response& _return, const ShortQuery6Request& request) = 0;
  virtual void shortQuery7(std::vector<ShortQuery7Response> & _return, const ShortQuery7Request& request) = 0;
  virtual void update1(const Update1Request& request) = 0;
  virtual void update2(const Update2Request& request) = 0;
  virtual void update3(const Update3Request& request) = 0;
  virtual void update4(const Update4Request& request) = 0;
  virtual void update5(const Update5Request& request) = 0;
  virtual void update6(const Update6Request& request) = 0;
  virtual void update7(const Update7Request& request) = 0;
  virtual void update8(const Update8Request& request) = 0;
};

class InteractiveIfFactory {
 public:
  typedef InteractiveIf Handler;

  virtual ~InteractiveIfFactory() {}

  virtual InteractiveIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InteractiveIf* /* handler */) = 0;
  };

class InteractiveIfSingletonFactory : virtual public InteractiveIfFactory {
 public:
  InteractiveIfSingletonFactory(const ::std::shared_ptr<InteractiveIf>& iface) : iface_(iface) {}
  virtual ~InteractiveIfSingletonFactory() {}

  virtual InteractiveIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(InteractiveIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<InteractiveIf> iface_;
};

class InteractiveNull : virtual public InteractiveIf {
 public:
  virtual ~InteractiveNull() {}
  void query1(std::vector<Query1Response> & /* _return */, const Query1Request& /* request */) override {
    return;
  }
  void query2(std::vector<Query2Response> & /* _return */, const Query2Request& /* request */) override {
    return;
  }
  void query3(std::vector<Query3Response> & /* _return */, const Query3Request& /* request */) override {
    return;
  }
  void query4(std::vector<Query4Response> & /* _return */, const Query4Request& /* request */) override {
    return;
  }
  void query5(std::vector<Query5Response> & /* _return */, const Query5Request& /* request */) override {
    return;
  }
  void query6(std::vector<Query6Response> & /* _return */, const Query6Request& /* request */) override {
    return;
  }
  void query7(std::vector<Query7Response> & /* _return */, const Query7Request& /* request */) override {
    return;
  }
  void query8(std::vector<Query8Response> & /* _return */, const Query8Request& /* request */) override {
    return;
  }
  void query9(std::vector<Query9Response> & /* _return */, const Query9Request& /* request */) override {
    return;
  }
  void query10(std::vector<Query10Response> & /* _return */, const Query10Request& /* request */) override {
    return;
  }
  void query11(std::vector<Query11Response> & /* _return */, const Query11Request& /* request */) override {
    return;
  }
  void query12(std::vector<Query12Response> & /* _return */, const Query12Request& /* request */) override {
    return;
  }
  void query13(Query13Response& /* _return */, const Query13Request& /* request */) override {
    return;
  }
  void query14(std::vector<Query14Response> & /* _return */, const Query14Request& /* request */) override {
    return;
  }
  void shortQuery1(ShortQuery1Response& /* _return */, const ShortQuery1Request& /* request */) override {
    return;
  }
  void shortQuery2(std::vector<ShortQuery2Response> & /* _return */, const ShortQuery2Request& /* request */) override {
    return;
  }
  void shortQuery3(std::vector<ShortQuery3Response> & /* _return */, const ShortQuery3Request& /* request */) override {
    return;
  }
  void shortQuery4(ShortQuery4Response& /* _return */, const ShortQuery4Request& /* request */) override {
    return;
  }
  void shortQuery5(ShortQuery5Response& /* _return */, const ShortQuery5Request& /* request */) override {
    return;
  }
  void shortQuery6(ShortQuery6Response& /* _return */, const ShortQuery6Request& /* request */) override {
    return;
  }
  void shortQuery7(std::vector<ShortQuery7Response> & /* _return */, const ShortQuery7Request& /* request */) override {
    return;
  }
  void update1(const Update1Request& /* request */) override {
    return;
  }
  void update2(const Update2Request& /* request */) override {
    return;
  }
  void update3(const Update3Request& /* request */) override {
    return;
  }
  void update4(const Update4Request& /* request */) override {
    return;
  }
  void update5(const Update5Request& /* request */) override {
    return;
  }
  void update6(const Update6Request& /* request */) override {
    return;
  }
  void update7(const Update7Request& /* request */) override {
    return;
  }
  void update8(const Update8Request& /* request */) override {
    return;
  }
};

typedef struct _Interactive_query1_args__isset {
  _Interactive_query1_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query1_args__isset;

class Interactive_query1_args {
 public:

  Interactive_query1_args(const Interactive_query1_args&);
  Interactive_query1_args& operator=(const Interactive_query1_args&);
  Interactive_query1_args() noexcept {
  }

  virtual ~Interactive_query1_args() noexcept;
  Query1Request request;

  _Interactive_query1_args__isset __isset;

  void __set_request(const Query1Request& val);

  bool operator == (const Interactive_query1_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query1_pargs {
 public:


  virtual ~Interactive_query1_pargs() noexcept;
  const Query1Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query1_result__isset {
  _Interactive_query1_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query1_result__isset;

class Interactive_query1_result {
 public:

  Interactive_query1_result(const Interactive_query1_result&);
  Interactive_query1_result& operator=(const Interactive_query1_result&);
  Interactive_query1_result() noexcept {
  }

  virtual ~Interactive_query1_result() noexcept;
  std::vector<Query1Response>  success;

  _Interactive_query1_result__isset __isset;

  void __set_success(const std::vector<Query1Response> & val);

  bool operator == (const Interactive_query1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query1_presult__isset {
  _Interactive_query1_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query1_presult__isset;

class Interactive_query1_presult {
 public:


  virtual ~Interactive_query1_presult() noexcept;
  std::vector<Query1Response> * success;

  _Interactive_query1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query2_args__isset {
  _Interactive_query2_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query2_args__isset;

class Interactive_query2_args {
 public:

  Interactive_query2_args(const Interactive_query2_args&) noexcept;
  Interactive_query2_args& operator=(const Interactive_query2_args&) noexcept;
  Interactive_query2_args() noexcept {
  }

  virtual ~Interactive_query2_args() noexcept;
  Query2Request request;

  _Interactive_query2_args__isset __isset;

  void __set_request(const Query2Request& val);

  bool operator == (const Interactive_query2_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query2_pargs {
 public:


  virtual ~Interactive_query2_pargs() noexcept;
  const Query2Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query2_result__isset {
  _Interactive_query2_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query2_result__isset;

class Interactive_query2_result {
 public:

  Interactive_query2_result(const Interactive_query2_result&);
  Interactive_query2_result& operator=(const Interactive_query2_result&);
  Interactive_query2_result() noexcept {
  }

  virtual ~Interactive_query2_result() noexcept;
  std::vector<Query2Response>  success;

  _Interactive_query2_result__isset __isset;

  void __set_success(const std::vector<Query2Response> & val);

  bool operator == (const Interactive_query2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query2_presult__isset {
  _Interactive_query2_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query2_presult__isset;

class Interactive_query2_presult {
 public:


  virtual ~Interactive_query2_presult() noexcept;
  std::vector<Query2Response> * success;

  _Interactive_query2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query3_args__isset {
  _Interactive_query3_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query3_args__isset;

class Interactive_query3_args {
 public:

  Interactive_query3_args(const Interactive_query3_args&);
  Interactive_query3_args& operator=(const Interactive_query3_args&);
  Interactive_query3_args() noexcept {
  }

  virtual ~Interactive_query3_args() noexcept;
  Query3Request request;

  _Interactive_query3_args__isset __isset;

  void __set_request(const Query3Request& val);

  bool operator == (const Interactive_query3_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query3_pargs {
 public:


  virtual ~Interactive_query3_pargs() noexcept;
  const Query3Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query3_result__isset {
  _Interactive_query3_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query3_result__isset;

class Interactive_query3_result {
 public:

  Interactive_query3_result(const Interactive_query3_result&);
  Interactive_query3_result& operator=(const Interactive_query3_result&);
  Interactive_query3_result() noexcept {
  }

  virtual ~Interactive_query3_result() noexcept;
  std::vector<Query3Response>  success;

  _Interactive_query3_result__isset __isset;

  void __set_success(const std::vector<Query3Response> & val);

  bool operator == (const Interactive_query3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query3_presult__isset {
  _Interactive_query3_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query3_presult__isset;

class Interactive_query3_presult {
 public:


  virtual ~Interactive_query3_presult() noexcept;
  std::vector<Query3Response> * success;

  _Interactive_query3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query4_args__isset {
  _Interactive_query4_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query4_args__isset;

class Interactive_query4_args {
 public:

  Interactive_query4_args(const Interactive_query4_args&) noexcept;
  Interactive_query4_args& operator=(const Interactive_query4_args&) noexcept;
  Interactive_query4_args() noexcept {
  }

  virtual ~Interactive_query4_args() noexcept;
  Query4Request request;

  _Interactive_query4_args__isset __isset;

  void __set_request(const Query4Request& val);

  bool operator == (const Interactive_query4_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query4_pargs {
 public:


  virtual ~Interactive_query4_pargs() noexcept;
  const Query4Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query4_result__isset {
  _Interactive_query4_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query4_result__isset;

class Interactive_query4_result {
 public:

  Interactive_query4_result(const Interactive_query4_result&);
  Interactive_query4_result& operator=(const Interactive_query4_result&);
  Interactive_query4_result() noexcept {
  }

  virtual ~Interactive_query4_result() noexcept;
  std::vector<Query4Response>  success;

  _Interactive_query4_result__isset __isset;

  void __set_success(const std::vector<Query4Response> & val);

  bool operator == (const Interactive_query4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query4_presult__isset {
  _Interactive_query4_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query4_presult__isset;

class Interactive_query4_presult {
 public:


  virtual ~Interactive_query4_presult() noexcept;
  std::vector<Query4Response> * success;

  _Interactive_query4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query5_args__isset {
  _Interactive_query5_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query5_args__isset;

class Interactive_query5_args {
 public:

  Interactive_query5_args(const Interactive_query5_args&) noexcept;
  Interactive_query5_args& operator=(const Interactive_query5_args&) noexcept;
  Interactive_query5_args() noexcept {
  }

  virtual ~Interactive_query5_args() noexcept;
  Query5Request request;

  _Interactive_query5_args__isset __isset;

  void __set_request(const Query5Request& val);

  bool operator == (const Interactive_query5_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query5_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query5_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query5_pargs {
 public:


  virtual ~Interactive_query5_pargs() noexcept;
  const Query5Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query5_result__isset {
  _Interactive_query5_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query5_result__isset;

class Interactive_query5_result {
 public:

  Interactive_query5_result(const Interactive_query5_result&);
  Interactive_query5_result& operator=(const Interactive_query5_result&);
  Interactive_query5_result() noexcept {
  }

  virtual ~Interactive_query5_result() noexcept;
  std::vector<Query5Response>  success;

  _Interactive_query5_result__isset __isset;

  void __set_success(const std::vector<Query5Response> & val);

  bool operator == (const Interactive_query5_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query5_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query5_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query5_presult__isset {
  _Interactive_query5_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query5_presult__isset;

class Interactive_query5_presult {
 public:


  virtual ~Interactive_query5_presult() noexcept;
  std::vector<Query5Response> * success;

  _Interactive_query5_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query6_args__isset {
  _Interactive_query6_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query6_args__isset;

class Interactive_query6_args {
 public:

  Interactive_query6_args(const Interactive_query6_args&);
  Interactive_query6_args& operator=(const Interactive_query6_args&);
  Interactive_query6_args() noexcept {
  }

  virtual ~Interactive_query6_args() noexcept;
  Query6Request request;

  _Interactive_query6_args__isset __isset;

  void __set_request(const Query6Request& val);

  bool operator == (const Interactive_query6_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query6_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query6_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query6_pargs {
 public:


  virtual ~Interactive_query6_pargs() noexcept;
  const Query6Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query6_result__isset {
  _Interactive_query6_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query6_result__isset;

class Interactive_query6_result {
 public:

  Interactive_query6_result(const Interactive_query6_result&);
  Interactive_query6_result& operator=(const Interactive_query6_result&);
  Interactive_query6_result() noexcept {
  }

  virtual ~Interactive_query6_result() noexcept;
  std::vector<Query6Response>  success;

  _Interactive_query6_result__isset __isset;

  void __set_success(const std::vector<Query6Response> & val);

  bool operator == (const Interactive_query6_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query6_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query6_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query6_presult__isset {
  _Interactive_query6_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query6_presult__isset;

class Interactive_query6_presult {
 public:


  virtual ~Interactive_query6_presult() noexcept;
  std::vector<Query6Response> * success;

  _Interactive_query6_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query7_args__isset {
  _Interactive_query7_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query7_args__isset;

class Interactive_query7_args {
 public:

  Interactive_query7_args(const Interactive_query7_args&) noexcept;
  Interactive_query7_args& operator=(const Interactive_query7_args&) noexcept;
  Interactive_query7_args() noexcept {
  }

  virtual ~Interactive_query7_args() noexcept;
  Query7Request request;

  _Interactive_query7_args__isset __isset;

  void __set_request(const Query7Request& val);

  bool operator == (const Interactive_query7_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query7_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query7_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query7_pargs {
 public:


  virtual ~Interactive_query7_pargs() noexcept;
  const Query7Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query7_result__isset {
  _Interactive_query7_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query7_result__isset;

class Interactive_query7_result {
 public:

  Interactive_query7_result(const Interactive_query7_result&);
  Interactive_query7_result& operator=(const Interactive_query7_result&);
  Interactive_query7_result() noexcept {
  }

  virtual ~Interactive_query7_result() noexcept;
  std::vector<Query7Response>  success;

  _Interactive_query7_result__isset __isset;

  void __set_success(const std::vector<Query7Response> & val);

  bool operator == (const Interactive_query7_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query7_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query7_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query7_presult__isset {
  _Interactive_query7_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query7_presult__isset;

class Interactive_query7_presult {
 public:


  virtual ~Interactive_query7_presult() noexcept;
  std::vector<Query7Response> * success;

  _Interactive_query7_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query8_args__isset {
  _Interactive_query8_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query8_args__isset;

class Interactive_query8_args {
 public:

  Interactive_query8_args(const Interactive_query8_args&) noexcept;
  Interactive_query8_args& operator=(const Interactive_query8_args&) noexcept;
  Interactive_query8_args() noexcept {
  }

  virtual ~Interactive_query8_args() noexcept;
  Query8Request request;

  _Interactive_query8_args__isset __isset;

  void __set_request(const Query8Request& val);

  bool operator == (const Interactive_query8_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query8_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query8_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query8_pargs {
 public:


  virtual ~Interactive_query8_pargs() noexcept;
  const Query8Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query8_result__isset {
  _Interactive_query8_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query8_result__isset;

class Interactive_query8_result {
 public:

  Interactive_query8_result(const Interactive_query8_result&);
  Interactive_query8_result& operator=(const Interactive_query8_result&);
  Interactive_query8_result() noexcept {
  }

  virtual ~Interactive_query8_result() noexcept;
  std::vector<Query8Response>  success;

  _Interactive_query8_result__isset __isset;

  void __set_success(const std::vector<Query8Response> & val);

  bool operator == (const Interactive_query8_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query8_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query8_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query8_presult__isset {
  _Interactive_query8_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query8_presult__isset;

class Interactive_query8_presult {
 public:


  virtual ~Interactive_query8_presult() noexcept;
  std::vector<Query8Response> * success;

  _Interactive_query8_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query9_args__isset {
  _Interactive_query9_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query9_args__isset;

class Interactive_query9_args {
 public:

  Interactive_query9_args(const Interactive_query9_args&) noexcept;
  Interactive_query9_args& operator=(const Interactive_query9_args&) noexcept;
  Interactive_query9_args() noexcept {
  }

  virtual ~Interactive_query9_args() noexcept;
  Query9Request request;

  _Interactive_query9_args__isset __isset;

  void __set_request(const Query9Request& val);

  bool operator == (const Interactive_query9_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query9_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query9_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query9_pargs {
 public:


  virtual ~Interactive_query9_pargs() noexcept;
  const Query9Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query9_result__isset {
  _Interactive_query9_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query9_result__isset;

class Interactive_query9_result {
 public:

  Interactive_query9_result(const Interactive_query9_result&);
  Interactive_query9_result& operator=(const Interactive_query9_result&);
  Interactive_query9_result() noexcept {
  }

  virtual ~Interactive_query9_result() noexcept;
  std::vector<Query9Response>  success;

  _Interactive_query9_result__isset __isset;

  void __set_success(const std::vector<Query9Response> & val);

  bool operator == (const Interactive_query9_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query9_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query9_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query9_presult__isset {
  _Interactive_query9_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query9_presult__isset;

class Interactive_query9_presult {
 public:


  virtual ~Interactive_query9_presult() noexcept;
  std::vector<Query9Response> * success;

  _Interactive_query9_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query10_args__isset {
  _Interactive_query10_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query10_args__isset;

class Interactive_query10_args {
 public:

  Interactive_query10_args(const Interactive_query10_args&) noexcept;
  Interactive_query10_args& operator=(const Interactive_query10_args&) noexcept;
  Interactive_query10_args() noexcept {
  }

  virtual ~Interactive_query10_args() noexcept;
  Query10Request request;

  _Interactive_query10_args__isset __isset;

  void __set_request(const Query10Request& val);

  bool operator == (const Interactive_query10_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query10_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query10_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query10_pargs {
 public:


  virtual ~Interactive_query10_pargs() noexcept;
  const Query10Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query10_result__isset {
  _Interactive_query10_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query10_result__isset;

class Interactive_query10_result {
 public:

  Interactive_query10_result(const Interactive_query10_result&);
  Interactive_query10_result& operator=(const Interactive_query10_result&);
  Interactive_query10_result() noexcept {
  }

  virtual ~Interactive_query10_result() noexcept;
  std::vector<Query10Response>  success;

  _Interactive_query10_result__isset __isset;

  void __set_success(const std::vector<Query10Response> & val);

  bool operator == (const Interactive_query10_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query10_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query10_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query10_presult__isset {
  _Interactive_query10_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query10_presult__isset;

class Interactive_query10_presult {
 public:


  virtual ~Interactive_query10_presult() noexcept;
  std::vector<Query10Response> * success;

  _Interactive_query10_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query11_args__isset {
  _Interactive_query11_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query11_args__isset;

class Interactive_query11_args {
 public:

  Interactive_query11_args(const Interactive_query11_args&);
  Interactive_query11_args& operator=(const Interactive_query11_args&);
  Interactive_query11_args() noexcept {
  }

  virtual ~Interactive_query11_args() noexcept;
  Query11Request request;

  _Interactive_query11_args__isset __isset;

  void __set_request(const Query11Request& val);

  bool operator == (const Interactive_query11_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query11_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query11_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query11_pargs {
 public:


  virtual ~Interactive_query11_pargs() noexcept;
  const Query11Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query11_result__isset {
  _Interactive_query11_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query11_result__isset;

class Interactive_query11_result {
 public:

  Interactive_query11_result(const Interactive_query11_result&);
  Interactive_query11_result& operator=(const Interactive_query11_result&);
  Interactive_query11_result() noexcept {
  }

  virtual ~Interactive_query11_result() noexcept;
  std::vector<Query11Response>  success;

  _Interactive_query11_result__isset __isset;

  void __set_success(const std::vector<Query11Response> & val);

  bool operator == (const Interactive_query11_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query11_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query11_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query11_presult__isset {
  _Interactive_query11_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query11_presult__isset;

class Interactive_query11_presult {
 public:


  virtual ~Interactive_query11_presult() noexcept;
  std::vector<Query11Response> * success;

  _Interactive_query11_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query12_args__isset {
  _Interactive_query12_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query12_args__isset;

class Interactive_query12_args {
 public:

  Interactive_query12_args(const Interactive_query12_args&);
  Interactive_query12_args& operator=(const Interactive_query12_args&);
  Interactive_query12_args() noexcept {
  }

  virtual ~Interactive_query12_args() noexcept;
  Query12Request request;

  _Interactive_query12_args__isset __isset;

  void __set_request(const Query12Request& val);

  bool operator == (const Interactive_query12_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query12_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query12_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query12_pargs {
 public:


  virtual ~Interactive_query12_pargs() noexcept;
  const Query12Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query12_result__isset {
  _Interactive_query12_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query12_result__isset;

class Interactive_query12_result {
 public:

  Interactive_query12_result(const Interactive_query12_result&);
  Interactive_query12_result& operator=(const Interactive_query12_result&);
  Interactive_query12_result() noexcept {
  }

  virtual ~Interactive_query12_result() noexcept;
  std::vector<Query12Response>  success;

  _Interactive_query12_result__isset __isset;

  void __set_success(const std::vector<Query12Response> & val);

  bool operator == (const Interactive_query12_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query12_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query12_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query12_presult__isset {
  _Interactive_query12_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query12_presult__isset;

class Interactive_query12_presult {
 public:


  virtual ~Interactive_query12_presult() noexcept;
  std::vector<Query12Response> * success;

  _Interactive_query12_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query13_args__isset {
  _Interactive_query13_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query13_args__isset;

class Interactive_query13_args {
 public:

  Interactive_query13_args(const Interactive_query13_args&) noexcept;
  Interactive_query13_args& operator=(const Interactive_query13_args&) noexcept;
  Interactive_query13_args() noexcept {
  }

  virtual ~Interactive_query13_args() noexcept;
  Query13Request request;

  _Interactive_query13_args__isset __isset;

  void __set_request(const Query13Request& val);

  bool operator == (const Interactive_query13_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query13_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query13_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query13_pargs {
 public:


  virtual ~Interactive_query13_pargs() noexcept;
  const Query13Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query13_result__isset {
  _Interactive_query13_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query13_result__isset;

class Interactive_query13_result {
 public:

  Interactive_query13_result(const Interactive_query13_result&) noexcept;
  Interactive_query13_result& operator=(const Interactive_query13_result&) noexcept;
  Interactive_query13_result() noexcept {
  }

  virtual ~Interactive_query13_result() noexcept;
  Query13Response success;

  _Interactive_query13_result__isset __isset;

  void __set_success(const Query13Response& val);

  bool operator == (const Interactive_query13_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query13_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query13_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query13_presult__isset {
  _Interactive_query13_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query13_presult__isset;

class Interactive_query13_presult {
 public:


  virtual ~Interactive_query13_presult() noexcept;
  Query13Response* success;

  _Interactive_query13_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_query14_args__isset {
  _Interactive_query14_args__isset() : request(false) {}
  bool request :1;
} _Interactive_query14_args__isset;

class Interactive_query14_args {
 public:

  Interactive_query14_args(const Interactive_query14_args&) noexcept;
  Interactive_query14_args& operator=(const Interactive_query14_args&) noexcept;
  Interactive_query14_args() noexcept {
  }

  virtual ~Interactive_query14_args() noexcept;
  Query14Request request;

  _Interactive_query14_args__isset __isset;

  void __set_request(const Query14Request& val);

  bool operator == (const Interactive_query14_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_query14_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query14_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_query14_pargs {
 public:


  virtual ~Interactive_query14_pargs() noexcept;
  const Query14Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query14_result__isset {
  _Interactive_query14_result__isset() : success(false) {}
  bool success :1;
} _Interactive_query14_result__isset;

class Interactive_query14_result {
 public:

  Interactive_query14_result(const Interactive_query14_result&);
  Interactive_query14_result& operator=(const Interactive_query14_result&);
  Interactive_query14_result() noexcept {
  }

  virtual ~Interactive_query14_result() noexcept;
  std::vector<Query14Response>  success;

  _Interactive_query14_result__isset __isset;

  void __set_success(const std::vector<Query14Response> & val);

  bool operator == (const Interactive_query14_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_query14_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_query14_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_query14_presult__isset {
  _Interactive_query14_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_query14_presult__isset;

class Interactive_query14_presult {
 public:


  virtual ~Interactive_query14_presult() noexcept;
  std::vector<Query14Response> * success;

  _Interactive_query14_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_shortQuery1_args__isset {
  _Interactive_shortQuery1_args__isset() : request(false) {}
  bool request :1;
} _Interactive_shortQuery1_args__isset;

class Interactive_shortQuery1_args {
 public:

  Interactive_shortQuery1_args(const Interactive_shortQuery1_args&) noexcept;
  Interactive_shortQuery1_args& operator=(const Interactive_shortQuery1_args&) noexcept;
  Interactive_shortQuery1_args() noexcept {
  }

  virtual ~Interactive_shortQuery1_args() noexcept;
  ShortQuery1Request request;

  _Interactive_shortQuery1_args__isset __isset;

  void __set_request(const ShortQuery1Request& val);

  bool operator == (const Interactive_shortQuery1_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_shortQuery1_pargs {
 public:


  virtual ~Interactive_shortQuery1_pargs() noexcept;
  const ShortQuery1Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery1_result__isset {
  _Interactive_shortQuery1_result__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery1_result__isset;

class Interactive_shortQuery1_result {
 public:

  Interactive_shortQuery1_result(const Interactive_shortQuery1_result&);
  Interactive_shortQuery1_result& operator=(const Interactive_shortQuery1_result&);
  Interactive_shortQuery1_result() noexcept {
  }

  virtual ~Interactive_shortQuery1_result() noexcept;
  ShortQuery1Response success;

  _Interactive_shortQuery1_result__isset __isset;

  void __set_success(const ShortQuery1Response& val);

  bool operator == (const Interactive_shortQuery1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery1_presult__isset {
  _Interactive_shortQuery1_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery1_presult__isset;

class Interactive_shortQuery1_presult {
 public:


  virtual ~Interactive_shortQuery1_presult() noexcept;
  ShortQuery1Response* success;

  _Interactive_shortQuery1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_shortQuery2_args__isset {
  _Interactive_shortQuery2_args__isset() : request(false) {}
  bool request :1;
} _Interactive_shortQuery2_args__isset;

class Interactive_shortQuery2_args {
 public:

  Interactive_shortQuery2_args(const Interactive_shortQuery2_args&) noexcept;
  Interactive_shortQuery2_args& operator=(const Interactive_shortQuery2_args&) noexcept;
  Interactive_shortQuery2_args() noexcept {
  }

  virtual ~Interactive_shortQuery2_args() noexcept;
  ShortQuery2Request request;

  _Interactive_shortQuery2_args__isset __isset;

  void __set_request(const ShortQuery2Request& val);

  bool operator == (const Interactive_shortQuery2_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_shortQuery2_pargs {
 public:


  virtual ~Interactive_shortQuery2_pargs() noexcept;
  const ShortQuery2Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery2_result__isset {
  _Interactive_shortQuery2_result__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery2_result__isset;

class Interactive_shortQuery2_result {
 public:

  Interactive_shortQuery2_result(const Interactive_shortQuery2_result&);
  Interactive_shortQuery2_result& operator=(const Interactive_shortQuery2_result&);
  Interactive_shortQuery2_result() noexcept {
  }

  virtual ~Interactive_shortQuery2_result() noexcept;
  std::vector<ShortQuery2Response>  success;

  _Interactive_shortQuery2_result__isset __isset;

  void __set_success(const std::vector<ShortQuery2Response> & val);

  bool operator == (const Interactive_shortQuery2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery2_presult__isset {
  _Interactive_shortQuery2_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery2_presult__isset;

class Interactive_shortQuery2_presult {
 public:


  virtual ~Interactive_shortQuery2_presult() noexcept;
  std::vector<ShortQuery2Response> * success;

  _Interactive_shortQuery2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_shortQuery3_args__isset {
  _Interactive_shortQuery3_args__isset() : request(false) {}
  bool request :1;
} _Interactive_shortQuery3_args__isset;

class Interactive_shortQuery3_args {
 public:

  Interactive_shortQuery3_args(const Interactive_shortQuery3_args&) noexcept;
  Interactive_shortQuery3_args& operator=(const Interactive_shortQuery3_args&) noexcept;
  Interactive_shortQuery3_args() noexcept {
  }

  virtual ~Interactive_shortQuery3_args() noexcept;
  ShortQuery3Request request;

  _Interactive_shortQuery3_args__isset __isset;

  void __set_request(const ShortQuery3Request& val);

  bool operator == (const Interactive_shortQuery3_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_shortQuery3_pargs {
 public:


  virtual ~Interactive_shortQuery3_pargs() noexcept;
  const ShortQuery3Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery3_result__isset {
  _Interactive_shortQuery3_result__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery3_result__isset;

class Interactive_shortQuery3_result {
 public:

  Interactive_shortQuery3_result(const Interactive_shortQuery3_result&);
  Interactive_shortQuery3_result& operator=(const Interactive_shortQuery3_result&);
  Interactive_shortQuery3_result() noexcept {
  }

  virtual ~Interactive_shortQuery3_result() noexcept;
  std::vector<ShortQuery3Response>  success;

  _Interactive_shortQuery3_result__isset __isset;

  void __set_success(const std::vector<ShortQuery3Response> & val);

  bool operator == (const Interactive_shortQuery3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery3_presult__isset {
  _Interactive_shortQuery3_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery3_presult__isset;

class Interactive_shortQuery3_presult {
 public:


  virtual ~Interactive_shortQuery3_presult() noexcept;
  std::vector<ShortQuery3Response> * success;

  _Interactive_shortQuery3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_shortQuery4_args__isset {
  _Interactive_shortQuery4_args__isset() : request(false) {}
  bool request :1;
} _Interactive_shortQuery4_args__isset;

class Interactive_shortQuery4_args {
 public:

  Interactive_shortQuery4_args(const Interactive_shortQuery4_args&) noexcept;
  Interactive_shortQuery4_args& operator=(const Interactive_shortQuery4_args&) noexcept;
  Interactive_shortQuery4_args() noexcept {
  }

  virtual ~Interactive_shortQuery4_args() noexcept;
  ShortQuery4Request request;

  _Interactive_shortQuery4_args__isset __isset;

  void __set_request(const ShortQuery4Request& val);

  bool operator == (const Interactive_shortQuery4_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_shortQuery4_pargs {
 public:


  virtual ~Interactive_shortQuery4_pargs() noexcept;
  const ShortQuery4Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery4_result__isset {
  _Interactive_shortQuery4_result__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery4_result__isset;

class Interactive_shortQuery4_result {
 public:

  Interactive_shortQuery4_result(const Interactive_shortQuery4_result&);
  Interactive_shortQuery4_result& operator=(const Interactive_shortQuery4_result&);
  Interactive_shortQuery4_result() noexcept {
  }

  virtual ~Interactive_shortQuery4_result() noexcept;
  ShortQuery4Response success;

  _Interactive_shortQuery4_result__isset __isset;

  void __set_success(const ShortQuery4Response& val);

  bool operator == (const Interactive_shortQuery4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery4_presult__isset {
  _Interactive_shortQuery4_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery4_presult__isset;

class Interactive_shortQuery4_presult {
 public:


  virtual ~Interactive_shortQuery4_presult() noexcept;
  ShortQuery4Response* success;

  _Interactive_shortQuery4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_shortQuery5_args__isset {
  _Interactive_shortQuery5_args__isset() : request(false) {}
  bool request :1;
} _Interactive_shortQuery5_args__isset;

class Interactive_shortQuery5_args {
 public:

  Interactive_shortQuery5_args(const Interactive_shortQuery5_args&) noexcept;
  Interactive_shortQuery5_args& operator=(const Interactive_shortQuery5_args&) noexcept;
  Interactive_shortQuery5_args() noexcept {
  }

  virtual ~Interactive_shortQuery5_args() noexcept;
  ShortQuery5Request request;

  _Interactive_shortQuery5_args__isset __isset;

  void __set_request(const ShortQuery5Request& val);

  bool operator == (const Interactive_shortQuery5_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery5_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery5_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_shortQuery5_pargs {
 public:


  virtual ~Interactive_shortQuery5_pargs() noexcept;
  const ShortQuery5Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery5_result__isset {
  _Interactive_shortQuery5_result__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery5_result__isset;

class Interactive_shortQuery5_result {
 public:

  Interactive_shortQuery5_result(const Interactive_shortQuery5_result&);
  Interactive_shortQuery5_result& operator=(const Interactive_shortQuery5_result&);
  Interactive_shortQuery5_result() noexcept {
  }

  virtual ~Interactive_shortQuery5_result() noexcept;
  ShortQuery5Response success;

  _Interactive_shortQuery5_result__isset __isset;

  void __set_success(const ShortQuery5Response& val);

  bool operator == (const Interactive_shortQuery5_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery5_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery5_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery5_presult__isset {
  _Interactive_shortQuery5_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery5_presult__isset;

class Interactive_shortQuery5_presult {
 public:


  virtual ~Interactive_shortQuery5_presult() noexcept;
  ShortQuery5Response* success;

  _Interactive_shortQuery5_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_shortQuery6_args__isset {
  _Interactive_shortQuery6_args__isset() : request(false) {}
  bool request :1;
} _Interactive_shortQuery6_args__isset;

class Interactive_shortQuery6_args {
 public:

  Interactive_shortQuery6_args(const Interactive_shortQuery6_args&) noexcept;
  Interactive_shortQuery6_args& operator=(const Interactive_shortQuery6_args&) noexcept;
  Interactive_shortQuery6_args() noexcept {
  }

  virtual ~Interactive_shortQuery6_args() noexcept;
  ShortQuery6Request request;

  _Interactive_shortQuery6_args__isset __isset;

  void __set_request(const ShortQuery6Request& val);

  bool operator == (const Interactive_shortQuery6_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery6_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery6_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_shortQuery6_pargs {
 public:


  virtual ~Interactive_shortQuery6_pargs() noexcept;
  const ShortQuery6Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery6_result__isset {
  _Interactive_shortQuery6_result__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery6_result__isset;

class Interactive_shortQuery6_result {
 public:

  Interactive_shortQuery6_result(const Interactive_shortQuery6_result&);
  Interactive_shortQuery6_result& operator=(const Interactive_shortQuery6_result&);
  Interactive_shortQuery6_result() noexcept {
  }

  virtual ~Interactive_shortQuery6_result() noexcept;
  ShortQuery6Response success;

  _Interactive_shortQuery6_result__isset __isset;

  void __set_success(const ShortQuery6Response& val);

  bool operator == (const Interactive_shortQuery6_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery6_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery6_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery6_presult__isset {
  _Interactive_shortQuery6_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery6_presult__isset;

class Interactive_shortQuery6_presult {
 public:


  virtual ~Interactive_shortQuery6_presult() noexcept;
  ShortQuery6Response* success;

  _Interactive_shortQuery6_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_shortQuery7_args__isset {
  _Interactive_shortQuery7_args__isset() : request(false) {}
  bool request :1;
} _Interactive_shortQuery7_args__isset;

class Interactive_shortQuery7_args {
 public:

  Interactive_shortQuery7_args(const Interactive_shortQuery7_args&) noexcept;
  Interactive_shortQuery7_args& operator=(const Interactive_shortQuery7_args&) noexcept;
  Interactive_shortQuery7_args() noexcept {
  }

  virtual ~Interactive_shortQuery7_args() noexcept;
  ShortQuery7Request request;

  _Interactive_shortQuery7_args__isset __isset;

  void __set_request(const ShortQuery7Request& val);

  bool operator == (const Interactive_shortQuery7_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery7_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery7_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_shortQuery7_pargs {
 public:


  virtual ~Interactive_shortQuery7_pargs() noexcept;
  const ShortQuery7Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery7_result__isset {
  _Interactive_shortQuery7_result__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery7_result__isset;

class Interactive_shortQuery7_result {
 public:

  Interactive_shortQuery7_result(const Interactive_shortQuery7_result&);
  Interactive_shortQuery7_result& operator=(const Interactive_shortQuery7_result&);
  Interactive_shortQuery7_result() noexcept {
  }

  virtual ~Interactive_shortQuery7_result() noexcept;
  std::vector<ShortQuery7Response>  success;

  _Interactive_shortQuery7_result__isset __isset;

  void __set_success(const std::vector<ShortQuery7Response> & val);

  bool operator == (const Interactive_shortQuery7_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Interactive_shortQuery7_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_shortQuery7_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Interactive_shortQuery7_presult__isset {
  _Interactive_shortQuery7_presult__isset() : success(false) {}
  bool success :1;
} _Interactive_shortQuery7_presult__isset;

class Interactive_shortQuery7_presult {
 public:


  virtual ~Interactive_shortQuery7_presult() noexcept;
  std::vector<ShortQuery7Response> * success;

  _Interactive_shortQuery7_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_update1_args__isset {
  _Interactive_update1_args__isset() : request(false) {}
  bool request :1;
} _Interactive_update1_args__isset;

class Interactive_update1_args {
 public:

  Interactive_update1_args(const Interactive_update1_args&);
  Interactive_update1_args& operator=(const Interactive_update1_args&);
  Interactive_update1_args() noexcept {
  }

  virtual ~Interactive_update1_args() noexcept;
  Update1Request request;

  _Interactive_update1_args__isset __isset;

  void __set_request(const Update1Request& val);

  bool operator == (const Interactive_update1_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_update1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update1_pargs {
 public:


  virtual ~Interactive_update1_pargs() noexcept;
  const Update1Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update1_result {
 public:

  Interactive_update1_result(const Interactive_update1_result&) noexcept;
  Interactive_update1_result& operator=(const Interactive_update1_result&) noexcept;
  Interactive_update1_result() noexcept {
  }

  virtual ~Interactive_update1_result() noexcept;

  bool operator == (const Interactive_update1_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Interactive_update1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update1_presult {
 public:


  virtual ~Interactive_update1_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_update2_args__isset {
  _Interactive_update2_args__isset() : request(false) {}
  bool request :1;
} _Interactive_update2_args__isset;

class Interactive_update2_args {
 public:

  Interactive_update2_args(const Interactive_update2_args&) noexcept;
  Interactive_update2_args& operator=(const Interactive_update2_args&) noexcept;
  Interactive_update2_args() noexcept {
  }

  virtual ~Interactive_update2_args() noexcept;
  Update2Request request;

  _Interactive_update2_args__isset __isset;

  void __set_request(const Update2Request& val);

  bool operator == (const Interactive_update2_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_update2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update2_pargs {
 public:


  virtual ~Interactive_update2_pargs() noexcept;
  const Update2Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update2_result {
 public:

  Interactive_update2_result(const Interactive_update2_result&) noexcept;
  Interactive_update2_result& operator=(const Interactive_update2_result&) noexcept;
  Interactive_update2_result() noexcept {
  }

  virtual ~Interactive_update2_result() noexcept;

  bool operator == (const Interactive_update2_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Interactive_update2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update2_presult {
 public:


  virtual ~Interactive_update2_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_update3_args__isset {
  _Interactive_update3_args__isset() : request(false) {}
  bool request :1;
} _Interactive_update3_args__isset;

class Interactive_update3_args {
 public:

  Interactive_update3_args(const Interactive_update3_args&) noexcept;
  Interactive_update3_args& operator=(const Interactive_update3_args&) noexcept;
  Interactive_update3_args() noexcept {
  }

  virtual ~Interactive_update3_args() noexcept;
  Update3Request request;

  _Interactive_update3_args__isset __isset;

  void __set_request(const Update3Request& val);

  bool operator == (const Interactive_update3_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_update3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update3_pargs {
 public:


  virtual ~Interactive_update3_pargs() noexcept;
  const Update3Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update3_result {
 public:

  Interactive_update3_result(const Interactive_update3_result&) noexcept;
  Interactive_update3_result& operator=(const Interactive_update3_result&) noexcept;
  Interactive_update3_result() noexcept {
  }

  virtual ~Interactive_update3_result() noexcept;

  bool operator == (const Interactive_update3_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Interactive_update3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update3_presult {
 public:


  virtual ~Interactive_update3_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_update4_args__isset {
  _Interactive_update4_args__isset() : request(false) {}
  bool request :1;
} _Interactive_update4_args__isset;

class Interactive_update4_args {
 public:

  Interactive_update4_args(const Interactive_update4_args&);
  Interactive_update4_args& operator=(const Interactive_update4_args&);
  Interactive_update4_args() noexcept {
  }

  virtual ~Interactive_update4_args() noexcept;
  Update4Request request;

  _Interactive_update4_args__isset __isset;

  void __set_request(const Update4Request& val);

  bool operator == (const Interactive_update4_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_update4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update4_pargs {
 public:


  virtual ~Interactive_update4_pargs() noexcept;
  const Update4Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update4_result {
 public:

  Interactive_update4_result(const Interactive_update4_result&) noexcept;
  Interactive_update4_result& operator=(const Interactive_update4_result&) noexcept;
  Interactive_update4_result() noexcept {
  }

  virtual ~Interactive_update4_result() noexcept;

  bool operator == (const Interactive_update4_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Interactive_update4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update4_presult {
 public:


  virtual ~Interactive_update4_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_update5_args__isset {
  _Interactive_update5_args__isset() : request(false) {}
  bool request :1;
} _Interactive_update5_args__isset;

class Interactive_update5_args {
 public:

  Interactive_update5_args(const Interactive_update5_args&) noexcept;
  Interactive_update5_args& operator=(const Interactive_update5_args&) noexcept;
  Interactive_update5_args() noexcept {
  }

  virtual ~Interactive_update5_args() noexcept;
  Update5Request request;

  _Interactive_update5_args__isset __isset;

  void __set_request(const Update5Request& val);

  bool operator == (const Interactive_update5_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_update5_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update5_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update5_pargs {
 public:


  virtual ~Interactive_update5_pargs() noexcept;
  const Update5Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update5_result {
 public:

  Interactive_update5_result(const Interactive_update5_result&) noexcept;
  Interactive_update5_result& operator=(const Interactive_update5_result&) noexcept;
  Interactive_update5_result() noexcept {
  }

  virtual ~Interactive_update5_result() noexcept;

  bool operator == (const Interactive_update5_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Interactive_update5_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update5_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update5_presult {
 public:


  virtual ~Interactive_update5_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_update6_args__isset {
  _Interactive_update6_args__isset() : request(false) {}
  bool request :1;
} _Interactive_update6_args__isset;

class Interactive_update6_args {
 public:

  Interactive_update6_args(const Interactive_update6_args&);
  Interactive_update6_args& operator=(const Interactive_update6_args&);
  Interactive_update6_args() noexcept {
  }

  virtual ~Interactive_update6_args() noexcept;
  Update6Request request;

  _Interactive_update6_args__isset __isset;

  void __set_request(const Update6Request& val);

  bool operator == (const Interactive_update6_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_update6_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update6_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update6_pargs {
 public:


  virtual ~Interactive_update6_pargs() noexcept;
  const Update6Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update6_result {
 public:

  Interactive_update6_result(const Interactive_update6_result&) noexcept;
  Interactive_update6_result& operator=(const Interactive_update6_result&) noexcept;
  Interactive_update6_result() noexcept {
  }

  virtual ~Interactive_update6_result() noexcept;

  bool operator == (const Interactive_update6_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Interactive_update6_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update6_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update6_presult {
 public:


  virtual ~Interactive_update6_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_update7_args__isset {
  _Interactive_update7_args__isset() : request(false) {}
  bool request :1;
} _Interactive_update7_args__isset;

class Interactive_update7_args {
 public:

  Interactive_update7_args(const Interactive_update7_args&);
  Interactive_update7_args& operator=(const Interactive_update7_args&);
  Interactive_update7_args() noexcept {
  }

  virtual ~Interactive_update7_args() noexcept;
  Update7Request request;

  _Interactive_update7_args__isset __isset;

  void __set_request(const Update7Request& val);

  bool operator == (const Interactive_update7_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_update7_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update7_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update7_pargs {
 public:


  virtual ~Interactive_update7_pargs() noexcept;
  const Update7Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update7_result {
 public:

  Interactive_update7_result(const Interactive_update7_result&) noexcept;
  Interactive_update7_result& operator=(const Interactive_update7_result&) noexcept;
  Interactive_update7_result() noexcept {
  }

  virtual ~Interactive_update7_result() noexcept;

  bool operator == (const Interactive_update7_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Interactive_update7_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update7_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update7_presult {
 public:


  virtual ~Interactive_update7_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Interactive_update8_args__isset {
  _Interactive_update8_args__isset() : request(false) {}
  bool request :1;
} _Interactive_update8_args__isset;

class Interactive_update8_args {
 public:

  Interactive_update8_args(const Interactive_update8_args&) noexcept;
  Interactive_update8_args& operator=(const Interactive_update8_args&) noexcept;
  Interactive_update8_args() noexcept {
  }

  virtual ~Interactive_update8_args() noexcept;
  Update8Request request;

  _Interactive_update8_args__isset __isset;

  void __set_request(const Update8Request& val);

  bool operator == (const Interactive_update8_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Interactive_update8_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update8_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update8_pargs {
 public:


  virtual ~Interactive_update8_pargs() noexcept;
  const Update8Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update8_result {
 public:

  Interactive_update8_result(const Interactive_update8_result&) noexcept;
  Interactive_update8_result& operator=(const Interactive_update8_result&) noexcept;
  Interactive_update8_result() noexcept {
  }

  virtual ~Interactive_update8_result() noexcept;

  bool operator == (const Interactive_update8_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Interactive_update8_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interactive_update8_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Interactive_update8_presult {
 public:


  virtual ~Interactive_update8_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InteractiveClient : virtual public InteractiveIf {
 public:
  InteractiveClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InteractiveClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query1(std::vector<Query1Response> & _return, const Query1Request& request) override;
  void send_query1(const Query1Request& request);
  void recv_query1(std::vector<Query1Response> & _return);
  void query2(std::vector<Query2Response> & _return, const Query2Request& request) override;
  void send_query2(const Query2Request& request);
  void recv_query2(std::vector<Query2Response> & _return);
  void query3(std::vector<Query3Response> & _return, const Query3Request& request) override;
  void send_query3(const Query3Request& request);
  void recv_query3(std::vector<Query3Response> & _return);
  void query4(std::vector<Query4Response> & _return, const Query4Request& request) override;
  void send_query4(const Query4Request& request);
  void recv_query4(std::vector<Query4Response> & _return);
  void query5(std::vector<Query5Response> & _return, const Query5Request& request) override;
  void send_query5(const Query5Request& request);
  void recv_query5(std::vector<Query5Response> & _return);
  void query6(std::vector<Query6Response> & _return, const Query6Request& request) override;
  void send_query6(const Query6Request& request);
  void recv_query6(std::vector<Query6Response> & _return);
  void query7(std::vector<Query7Response> & _return, const Query7Request& request) override;
  void send_query7(const Query7Request& request);
  void recv_query7(std::vector<Query7Response> & _return);
  void query8(std::vector<Query8Response> & _return, const Query8Request& request) override;
  void send_query8(const Query8Request& request);
  void recv_query8(std::vector<Query8Response> & _return);
  void query9(std::vector<Query9Response> & _return, const Query9Request& request) override;
  void send_query9(const Query9Request& request);
  void recv_query9(std::vector<Query9Response> & _return);
  void query10(std::vector<Query10Response> & _return, const Query10Request& request) override;
  void send_query10(const Query10Request& request);
  void recv_query10(std::vector<Query10Response> & _return);
  void query11(std::vector<Query11Response> & _return, const Query11Request& request) override;
  void send_query11(const Query11Request& request);
  void recv_query11(std::vector<Query11Response> & _return);
  void query12(std::vector<Query12Response> & _return, const Query12Request& request) override;
  void send_query12(const Query12Request& request);
  void recv_query12(std::vector<Query12Response> & _return);
  void query13(Query13Response& _return, const Query13Request& request) override;
  void send_query13(const Query13Request& request);
  void recv_query13(Query13Response& _return);
  void query14(std::vector<Query14Response> & _return, const Query14Request& request) override;
  void send_query14(const Query14Request& request);
  void recv_query14(std::vector<Query14Response> & _return);
  void shortQuery1(ShortQuery1Response& _return, const ShortQuery1Request& request) override;
  void send_shortQuery1(const ShortQuery1Request& request);
  void recv_shortQuery1(ShortQuery1Response& _return);
  void shortQuery2(std::vector<ShortQuery2Response> & _return, const ShortQuery2Request& request) override;
  void send_shortQuery2(const ShortQuery2Request& request);
  void recv_shortQuery2(std::vector<ShortQuery2Response> & _return);
  void shortQuery3(std::vector<ShortQuery3Response> & _return, const ShortQuery3Request& request) override;
  void send_shortQuery3(const ShortQuery3Request& request);
  void recv_shortQuery3(std::vector<ShortQuery3Response> & _return);
  void shortQuery4(ShortQuery4Response& _return, const ShortQuery4Request& request) override;
  void send_shortQuery4(const ShortQuery4Request& request);
  void recv_shortQuery4(ShortQuery4Response& _return);
  void shortQuery5(ShortQuery5Response& _return, const ShortQuery5Request& request) override;
  void send_shortQuery5(const ShortQuery5Request& request);
  void recv_shortQuery5(ShortQuery5Response& _return);
  void shortQuery6(ShortQuery6Response& _return, const ShortQuery6Request& request) override;
  void send_shortQuery6(const ShortQuery6Request& request);
  void recv_shortQuery6(ShortQuery6Response& _return);
  void shortQuery7(std::vector<ShortQuery7Response> & _return, const ShortQuery7Request& request) override;
  void send_shortQuery7(const ShortQuery7Request& request);
  void recv_shortQuery7(std::vector<ShortQuery7Response> & _return);
  void update1(const Update1Request& request) override;
  void send_update1(const Update1Request& request);
  void recv_update1();
  void update2(const Update2Request& request) override;
  void send_update2(const Update2Request& request);
  void recv_update2();
  void update3(const Update3Request& request) override;
  void send_update3(const Update3Request& request);
  void recv_update3();
  void update4(const Update4Request& request) override;
  void send_update4(const Update4Request& request);
  void recv_update4();
  void update5(const Update5Request& request) override;
  void send_update5(const Update5Request& request);
  void recv_update5();
  void update6(const Update6Request& request) override;
  void send_update6(const Update6Request& request);
  void recv_update6();
  void update7(const Update7Request& request) override;
  void send_update7(const Update7Request& request);
  void recv_update7();
  void update8(const Update8Request& request) override;
  void send_update8(const Update8Request& request);
  void recv_update8();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InteractiveProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<InteractiveIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (InteractiveProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_query1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortQuery1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortQuery2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortQuery3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortQuery4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortQuery5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortQuery6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortQuery7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InteractiveProcessor(::std::shared_ptr<InteractiveIf> iface) :
    iface_(iface) {
    processMap_["query1"] = &InteractiveProcessor::process_query1;
    processMap_["query2"] = &InteractiveProcessor::process_query2;
    processMap_["query3"] = &InteractiveProcessor::process_query3;
    processMap_["query4"] = &InteractiveProcessor::process_query4;
    processMap_["query5"] = &InteractiveProcessor::process_query5;
    processMap_["query6"] = &InteractiveProcessor::process_query6;
    processMap_["query7"] = &InteractiveProcessor::process_query7;
    processMap_["query8"] = &InteractiveProcessor::process_query8;
    processMap_["query9"] = &InteractiveProcessor::process_query9;
    processMap_["query10"] = &InteractiveProcessor::process_query10;
    processMap_["query11"] = &InteractiveProcessor::process_query11;
    processMap_["query12"] = &InteractiveProcessor::process_query12;
    processMap_["query13"] = &InteractiveProcessor::process_query13;
    processMap_["query14"] = &InteractiveProcessor::process_query14;
    processMap_["shortQuery1"] = &InteractiveProcessor::process_shortQuery1;
    processMap_["shortQuery2"] = &InteractiveProcessor::process_shortQuery2;
    processMap_["shortQuery3"] = &InteractiveProcessor::process_shortQuery3;
    processMap_["shortQuery4"] = &InteractiveProcessor::process_shortQuery4;
    processMap_["shortQuery5"] = &InteractiveProcessor::process_shortQuery5;
    processMap_["shortQuery6"] = &InteractiveProcessor::process_shortQuery6;
    processMap_["shortQuery7"] = &InteractiveProcessor::process_shortQuery7;
    processMap_["update1"] = &InteractiveProcessor::process_update1;
    processMap_["update2"] = &InteractiveProcessor::process_update2;
    processMap_["update3"] = &InteractiveProcessor::process_update3;
    processMap_["update4"] = &InteractiveProcessor::process_update4;
    processMap_["update5"] = &InteractiveProcessor::process_update5;
    processMap_["update6"] = &InteractiveProcessor::process_update6;
    processMap_["update7"] = &InteractiveProcessor::process_update7;
    processMap_["update8"] = &InteractiveProcessor::process_update8;
  }

  virtual ~InteractiveProcessor() {}
};

class InteractiveProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InteractiveProcessorFactory(const ::std::shared_ptr< InteractiveIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< InteractiveIfFactory > handlerFactory_;
};

class InteractiveMultiface : virtual public InteractiveIf {
 public:
  InteractiveMultiface(std::vector<std::shared_ptr<InteractiveIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InteractiveMultiface() {}
 protected:
  std::vector<std::shared_ptr<InteractiveIf> > ifaces_;
  InteractiveMultiface() {}
  void add(::std::shared_ptr<InteractiveIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void query1(std::vector<Query1Response> & _return, const Query1Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query1(_return, request);
    }
    ifaces_[i]->query1(_return, request);
    return;
  }

  void query2(std::vector<Query2Response> & _return, const Query2Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query2(_return, request);
    }
    ifaces_[i]->query2(_return, request);
    return;
  }

  void query3(std::vector<Query3Response> & _return, const Query3Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query3(_return, request);
    }
    ifaces_[i]->query3(_return, request);
    return;
  }

  void query4(std::vector<Query4Response> & _return, const Query4Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query4(_return, request);
    }
    ifaces_[i]->query4(_return, request);
    return;
  }

  void query5(std::vector<Query5Response> & _return, const Query5Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query5(_return, request);
    }
    ifaces_[i]->query5(_return, request);
    return;
  }

  void query6(std::vector<Query6Response> & _return, const Query6Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query6(_return, request);
    }
    ifaces_[i]->query6(_return, request);
    return;
  }

  void query7(std::vector<Query7Response> & _return, const Query7Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query7(_return, request);
    }
    ifaces_[i]->query7(_return, request);
    return;
  }

  void query8(std::vector<Query8Response> & _return, const Query8Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query8(_return, request);
    }
    ifaces_[i]->query8(_return, request);
    return;
  }

  void query9(std::vector<Query9Response> & _return, const Query9Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query9(_return, request);
    }
    ifaces_[i]->query9(_return, request);
    return;
  }

  void query10(std::vector<Query10Response> & _return, const Query10Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query10(_return, request);
    }
    ifaces_[i]->query10(_return, request);
    return;
  }

  void query11(std::vector<Query11Response> & _return, const Query11Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query11(_return, request);
    }
    ifaces_[i]->query11(_return, request);
    return;
  }

  void query12(std::vector<Query12Response> & _return, const Query12Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query12(_return, request);
    }
    ifaces_[i]->query12(_return, request);
    return;
  }

  void query13(Query13Response& _return, const Query13Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query13(_return, request);
    }
    ifaces_[i]->query13(_return, request);
    return;
  }

  void query14(std::vector<Query14Response> & _return, const Query14Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query14(_return, request);
    }
    ifaces_[i]->query14(_return, request);
    return;
  }

  void shortQuery1(ShortQuery1Response& _return, const ShortQuery1Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortQuery1(_return, request);
    }
    ifaces_[i]->shortQuery1(_return, request);
    return;
  }

  void shortQuery2(std::vector<ShortQuery2Response> & _return, const ShortQuery2Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortQuery2(_return, request);
    }
    ifaces_[i]->shortQuery2(_return, request);
    return;
  }

  void shortQuery3(std::vector<ShortQuery3Response> & _return, const ShortQuery3Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortQuery3(_return, request);
    }
    ifaces_[i]->shortQuery3(_return, request);
    return;
  }

  void shortQuery4(ShortQuery4Response& _return, const ShortQuery4Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortQuery4(_return, request);
    }
    ifaces_[i]->shortQuery4(_return, request);
    return;
  }

  void shortQuery5(ShortQuery5Response& _return, const ShortQuery5Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortQuery5(_return, request);
    }
    ifaces_[i]->shortQuery5(_return, request);
    return;
  }

  void shortQuery6(ShortQuery6Response& _return, const ShortQuery6Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortQuery6(_return, request);
    }
    ifaces_[i]->shortQuery6(_return, request);
    return;
  }

  void shortQuery7(std::vector<ShortQuery7Response> & _return, const ShortQuery7Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortQuery7(_return, request);
    }
    ifaces_[i]->shortQuery7(_return, request);
    return;
  }

  void update1(const Update1Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update1(request);
    }
    ifaces_[i]->update1(request);
  }

  void update2(const Update2Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update2(request);
    }
    ifaces_[i]->update2(request);
  }

  void update3(const Update3Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update3(request);
    }
    ifaces_[i]->update3(request);
  }

  void update4(const Update4Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update4(request);
    }
    ifaces_[i]->update4(request);
  }

  void update5(const Update5Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update5(request);
    }
    ifaces_[i]->update5(request);
  }

  void update6(const Update6Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update6(request);
    }
    ifaces_[i]->update6(request);
  }

  void update7(const Update7Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update7(request);
    }
    ifaces_[i]->update7(request);
  }

  void update8(const Update8Request& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update8(request);
    }
    ifaces_[i]->update8(request);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class InteractiveConcurrentClient : virtual public InteractiveIf {
 public:
  InteractiveConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  InteractiveConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query1(std::vector<Query1Response> & _return, const Query1Request& request) override;
  int32_t send_query1(const Query1Request& request);
  void recv_query1(std::vector<Query1Response> & _return, const int32_t seqid);
  void query2(std::vector<Query2Response> & _return, const Query2Request& request) override;
  int32_t send_query2(const Query2Request& request);
  void recv_query2(std::vector<Query2Response> & _return, const int32_t seqid);
  void query3(std::vector<Query3Response> & _return, const Query3Request& request) override;
  int32_t send_query3(const Query3Request& request);
  void recv_query3(std::vector<Query3Response> & _return, const int32_t seqid);
  void query4(std::vector<Query4Response> & _return, const Query4Request& request) override;
  int32_t send_query4(const Query4Request& request);
  void recv_query4(std::vector<Query4Response> & _return, const int32_t seqid);
  void query5(std::vector<Query5Response> & _return, const Query5Request& request) override;
  int32_t send_query5(const Query5Request& request);
  void recv_query5(std::vector<Query5Response> & _return, const int32_t seqid);
  void query6(std::vector<Query6Response> & _return, const Query6Request& request) override;
  int32_t send_query6(const Query6Request& request);
  void recv_query6(std::vector<Query6Response> & _return, const int32_t seqid);
  void query7(std::vector<Query7Response> & _return, const Query7Request& request) override;
  int32_t send_query7(const Query7Request& request);
  void recv_query7(std::vector<Query7Response> & _return, const int32_t seqid);
  void query8(std::vector<Query8Response> & _return, const Query8Request& request) override;
  int32_t send_query8(const Query8Request& request);
  void recv_query8(std::vector<Query8Response> & _return, const int32_t seqid);
  void query9(std::vector<Query9Response> & _return, const Query9Request& request) override;
  int32_t send_query9(const Query9Request& request);
  void recv_query9(std::vector<Query9Response> & _return, const int32_t seqid);
  void query10(std::vector<Query10Response> & _return, const Query10Request& request) override;
  int32_t send_query10(const Query10Request& request);
  void recv_query10(std::vector<Query10Response> & _return, const int32_t seqid);
  void query11(std::vector<Query11Response> & _return, const Query11Request& request) override;
  int32_t send_query11(const Query11Request& request);
  void recv_query11(std::vector<Query11Response> & _return, const int32_t seqid);
  void query12(std::vector<Query12Response> & _return, const Query12Request& request) override;
  int32_t send_query12(const Query12Request& request);
  void recv_query12(std::vector<Query12Response> & _return, const int32_t seqid);
  void query13(Query13Response& _return, const Query13Request& request) override;
  int32_t send_query13(const Query13Request& request);
  void recv_query13(Query13Response& _return, const int32_t seqid);
  void query14(std::vector<Query14Response> & _return, const Query14Request& request) override;
  int32_t send_query14(const Query14Request& request);
  void recv_query14(std::vector<Query14Response> & _return, const int32_t seqid);
  void shortQuery1(ShortQuery1Response& _return, const ShortQuery1Request& request) override;
  int32_t send_shortQuery1(const ShortQuery1Request& request);
  void recv_shortQuery1(ShortQuery1Response& _return, const int32_t seqid);
  void shortQuery2(std::vector<ShortQuery2Response> & _return, const ShortQuery2Request& request) override;
  int32_t send_shortQuery2(const ShortQuery2Request& request);
  void recv_shortQuery2(std::vector<ShortQuery2Response> & _return, const int32_t seqid);
  void shortQuery3(std::vector<ShortQuery3Response> & _return, const ShortQuery3Request& request) override;
  int32_t send_shortQuery3(const ShortQuery3Request& request);
  void recv_shortQuery3(std::vector<ShortQuery3Response> & _return, const int32_t seqid);
  void shortQuery4(ShortQuery4Response& _return, const ShortQuery4Request& request) override;
  int32_t send_shortQuery4(const ShortQuery4Request& request);
  void recv_shortQuery4(ShortQuery4Response& _return, const int32_t seqid);
  void shortQuery5(ShortQuery5Response& _return, const ShortQuery5Request& request) override;
  int32_t send_shortQuery5(const ShortQuery5Request& request);
  void recv_shortQuery5(ShortQuery5Response& _return, const int32_t seqid);
  void shortQuery6(ShortQuery6Response& _return, const ShortQuery6Request& request) override;
  int32_t send_shortQuery6(const ShortQuery6Request& request);
  void recv_shortQuery6(ShortQuery6Response& _return, const int32_t seqid);
  void shortQuery7(std::vector<ShortQuery7Response> & _return, const ShortQuery7Request& request) override;
  int32_t send_shortQuery7(const ShortQuery7Request& request);
  void recv_shortQuery7(std::vector<ShortQuery7Response> & _return, const int32_t seqid);
  void update1(const Update1Request& request) override;
  int32_t send_update1(const Update1Request& request);
  void recv_update1(const int32_t seqid);
  void update2(const Update2Request& request) override;
  int32_t send_update2(const Update2Request& request);
  void recv_update2(const int32_t seqid);
  void update3(const Update3Request& request) override;
  int32_t send_update3(const Update3Request& request);
  void recv_update3(const int32_t seqid);
  void update4(const Update4Request& request) override;
  int32_t send_update4(const Update4Request& request);
  void recv_update4(const int32_t seqid);
  void update5(const Update5Request& request) override;
  int32_t send_update5(const Update5Request& request);
  void recv_update5(const int32_t seqid);
  void update6(const Update6Request& request) override;
  int32_t send_update6(const Update6Request& request);
  void recv_update6(const int32_t seqid);
  void update7(const Update7Request& request) override;
  int32_t send_update7(const Update7Request& request);
  void recv_update7(const int32_t seqid);
  void update8(const Update8Request& request) override;
  int32_t send_update8(const Update8Request& request);
  void recv_update8(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
