// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Interactive.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::interactive;

class InteractiveHandler : virtual public InteractiveIf {
 public:
  InteractiveHandler() {
    // Your initialization goes here
  }

  void query1(std::vector<Query1Response> & _return, const Query1Request& request) {
    // Your implementation goes here
    printf("query1\n");
  }

  void query2(std::vector<Query2Response> & _return, const Query2Request& request) {
    // Your implementation goes here
    printf("query2\n");
  }

  void query3(std::vector<Query3Response> & _return, const Query3Request& request) {
    // Your implementation goes here
    printf("query3\n");
  }

  void query4(std::vector<Query4Response> & _return, const Query4Request& request) {
    // Your implementation goes here
    printf("query4\n");
  }

  void query5(std::vector<Query5Response> & _return, const Query5Request& request) {
    // Your implementation goes here
    printf("query5\n");
  }

  void query6(std::vector<Query6Response> & _return, const Query6Request& request) {
    // Your implementation goes here
    printf("query6\n");
  }

  void query7(std::vector<Query7Response> & _return, const Query7Request& request) {
    // Your implementation goes here
    printf("query7\n");
  }

  void query8(std::vector<Query8Response> & _return, const Query8Request& request) {
    // Your implementation goes here
    printf("query8\n");
  }

  void query9(std::vector<Query9Response> & _return, const Query9Request& request) {
    // Your implementation goes here
    printf("query9\n");
  }

  void query10(std::vector<Query10Response> & _return, const Query10Request& request) {
    // Your implementation goes here
    printf("query10\n");
  }

  void query11(std::vector<Query11Response> & _return, const Query11Request& request) {
    // Your implementation goes here
    printf("query11\n");
  }

  void query12(std::vector<Query12Response> & _return, const Query12Request& request) {
    // Your implementation goes here
    printf("query12\n");
  }

  void query13(Query13Response& _return, const Query13Request& request) {
    // Your implementation goes here
    printf("query13\n");
  }

  void query14(std::vector<Query14Response> & _return, const Query14Request& request) {
    // Your implementation goes here
    printf("query14\n");
  }

  void shortQuery1(ShortQuery1Response& _return, const ShortQuery1Request& request) {
    // Your implementation goes here
    printf("shortQuery1\n");
  }

  void shortQuery2(std::vector<ShortQuery2Response> & _return, const ShortQuery2Request& request) {
    // Your implementation goes here
    printf("shortQuery2\n");
  }

  void shortQuery3(std::vector<ShortQuery3Response> & _return, const ShortQuery3Request& request) {
    // Your implementation goes here
    printf("shortQuery3\n");
  }

  void shortQuery4(ShortQuery4Response& _return, const ShortQuery4Request& request) {
    // Your implementation goes here
    printf("shortQuery4\n");
  }

  void shortQuery5(ShortQuery5Response& _return, const ShortQuery5Request& request) {
    // Your implementation goes here
    printf("shortQuery5\n");
  }

  void shortQuery6(ShortQuery6Response& _return, const ShortQuery6Request& request) {
    // Your implementation goes here
    printf("shortQuery6\n");
  }

  void shortQuery7(std::vector<ShortQuery7Response> & _return, const ShortQuery7Request& request) {
    // Your implementation goes here
    printf("shortQuery7\n");
  }

  void update1(const Update1Request& request) {
    // Your implementation goes here
    printf("update1\n");
  }

  void update2(const Update2Request& request) {
    // Your implementation goes here
    printf("update2\n");
  }

  void update3(const Update3Request& request) {
    // Your implementation goes here
    printf("update3\n");
  }

  void update4(const Update4Request& request) {
    // Your implementation goes here
    printf("update4\n");
  }

  void update5(const Update5Request& request) {
    // Your implementation goes here
    printf("update5\n");
  }

  void update6(const Update6Request& request) {
    // Your implementation goes here
    printf("update6\n");
  }

  void update7(const Update7Request& request) {
    // Your implementation goes here
    printf("update7\n");
  }

  void update8(const Update8Request& request) {
    // Your implementation goes here
    printf("update8\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<InteractiveHandler> handler(new InteractiveHandler());
  ::std::shared_ptr<TProcessor> processor(new InteractiveProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

