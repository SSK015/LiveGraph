/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef interactive_TYPES_H
#define interactive_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace interactive {

class Query1Request;

class Query1Response;

class Query2Request;

class Query2Response;

class Query3Request;

class Query3Response;

class Query4Request;

class Query4Response;

class Query5Request;

class Query5Response;

class Query6Request;

class Query6Response;

class Query7Request;

class Query7Response;

class Query8Request;

class Query8Response;

class Query9Request;

class Query9Response;

class Query10Request;

class Query10Response;

class Query11Request;

class Query11Response;

class Query12Request;

class Query12Response;

class Query13Request;

class Query13Response;

class Query14Request;

class Query14Response;

class ShortQuery1Request;

class ShortQuery1Response;

class ShortQuery2Request;

class ShortQuery2Response;

class ShortQuery3Request;

class ShortQuery3Response;

class ShortQuery4Request;

class ShortQuery4Response;

class ShortQuery5Request;

class ShortQuery5Response;

class ShortQuery6Request;

class ShortQuery6Response;

class ShortQuery7Request;

class ShortQuery7Response;

class Update1Request;

class Update2Request;

class Update3Request;

class Update4Request;

class Update5Request;

class Update6Request;

class Update7Request;

class Update8Request;

typedef struct _Query1Request__isset {
  _Query1Request__isset() : personId(false), firstName(false), limit(false) {}
  bool personId :1;
  bool firstName :1;
  bool limit :1;
} _Query1Request__isset;

class Query1Request : public virtual ::apache::thrift::TBase {
 public:

  Query1Request(const Query1Request&);
  Query1Request& operator=(const Query1Request&);
  Query1Request() noexcept
                : personId(0),
                  firstName(),
                  limit(0) {
  }

  virtual ~Query1Request() noexcept;
  int64_t personId;
  std::string firstName;
  int32_t limit;

  _Query1Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_firstName(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const Query1Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(firstName == rhs.firstName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query1Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query1Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query1Request &a, Query1Request &b);

std::ostream& operator<<(std::ostream& out, const Query1Request& obj);

typedef struct _Query1Response__isset {
  _Query1Response__isset() : friendId(false), friendLastName(false), distanceFromPerson(false), friendBirthday(false), friendCreationDate(false), friendGender(false), friendBrowserUsed(false), friendLocationIp(false), friendEmails(false), friendLanguages(false), friendCityName(false), friendUniversities_name(false), friendUniversities_year(false), friendUniversities_city(false), friendCompanies_name(false), friendCompanies_year(false), friendCompanies_city(false) {}
  bool friendId :1;
  bool friendLastName :1;
  bool distanceFromPerson :1;
  bool friendBirthday :1;
  bool friendCreationDate :1;
  bool friendGender :1;
  bool friendBrowserUsed :1;
  bool friendLocationIp :1;
  bool friendEmails :1;
  bool friendLanguages :1;
  bool friendCityName :1;
  bool friendUniversities_name :1;
  bool friendUniversities_year :1;
  bool friendUniversities_city :1;
  bool friendCompanies_name :1;
  bool friendCompanies_year :1;
  bool friendCompanies_city :1;
} _Query1Response__isset;

class Query1Response : public virtual ::apache::thrift::TBase {
 public:

  Query1Response(const Query1Response&);
  Query1Response& operator=(const Query1Response&);
  Query1Response() noexcept
                 : friendId(0),
                   friendLastName(),
                   distanceFromPerson(0),
                   friendBirthday(0),
                   friendCreationDate(0),
                   friendGender(),
                   friendBrowserUsed(),
                   friendLocationIp(),
                   friendCityName() {
  }

  virtual ~Query1Response() noexcept;
  int64_t friendId;
  std::string friendLastName;
  int32_t distanceFromPerson;
  int64_t friendBirthday;
  int64_t friendCreationDate;
  std::string friendGender;
  std::string friendBrowserUsed;
  std::string friendLocationIp;
  std::vector<std::string>  friendEmails;
  std::vector<std::string>  friendLanguages;
  std::string friendCityName;
  std::vector<std::string>  friendUniversities_name;
  std::vector<int32_t>  friendUniversities_year;
  std::vector<std::string>  friendUniversities_city;
  std::vector<std::string>  friendCompanies_name;
  std::vector<int32_t>  friendCompanies_year;
  std::vector<std::string>  friendCompanies_city;

  _Query1Response__isset __isset;

  void __set_friendId(const int64_t val);

  void __set_friendLastName(const std::string& val);

  void __set_distanceFromPerson(const int32_t val);

  void __set_friendBirthday(const int64_t val);

  void __set_friendCreationDate(const int64_t val);

  void __set_friendGender(const std::string& val);

  void __set_friendBrowserUsed(const std::string& val);

  void __set_friendLocationIp(const std::string& val);

  void __set_friendEmails(const std::vector<std::string> & val);

  void __set_friendLanguages(const std::vector<std::string> & val);

  void __set_friendCityName(const std::string& val);

  void __set_friendUniversities_name(const std::vector<std::string> & val);

  void __set_friendUniversities_year(const std::vector<int32_t> & val);

  void __set_friendUniversities_city(const std::vector<std::string> & val);

  void __set_friendCompanies_name(const std::vector<std::string> & val);

  void __set_friendCompanies_year(const std::vector<int32_t> & val);

  void __set_friendCompanies_city(const std::vector<std::string> & val);

  bool operator == (const Query1Response & rhs) const
  {
    if (!(friendId == rhs.friendId))
      return false;
    if (!(friendLastName == rhs.friendLastName))
      return false;
    if (!(distanceFromPerson == rhs.distanceFromPerson))
      return false;
    if (!(friendBirthday == rhs.friendBirthday))
      return false;
    if (!(friendCreationDate == rhs.friendCreationDate))
      return false;
    if (!(friendGender == rhs.friendGender))
      return false;
    if (!(friendBrowserUsed == rhs.friendBrowserUsed))
      return false;
    if (!(friendLocationIp == rhs.friendLocationIp))
      return false;
    if (!(friendEmails == rhs.friendEmails))
      return false;
    if (!(friendLanguages == rhs.friendLanguages))
      return false;
    if (!(friendCityName == rhs.friendCityName))
      return false;
    if (!(friendUniversities_name == rhs.friendUniversities_name))
      return false;
    if (!(friendUniversities_year == rhs.friendUniversities_year))
      return false;
    if (!(friendUniversities_city == rhs.friendUniversities_city))
      return false;
    if (!(friendCompanies_name == rhs.friendCompanies_name))
      return false;
    if (!(friendCompanies_year == rhs.friendCompanies_year))
      return false;
    if (!(friendCompanies_city == rhs.friendCompanies_city))
      return false;
    return true;
  }
  bool operator != (const Query1Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query1Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query1Response &a, Query1Response &b);

std::ostream& operator<<(std::ostream& out, const Query1Response& obj);

typedef struct _Query2Request__isset {
  _Query2Request__isset() : personId(false), maxDate(false), limit(false) {}
  bool personId :1;
  bool maxDate :1;
  bool limit :1;
} _Query2Request__isset;

class Query2Request : public virtual ::apache::thrift::TBase {
 public:

  Query2Request(const Query2Request&) noexcept;
  Query2Request& operator=(const Query2Request&) noexcept;
  Query2Request() noexcept
                : personId(0),
                  maxDate(0),
                  limit(0) {
  }

  virtual ~Query2Request() noexcept;
  int64_t personId;
  int64_t maxDate;
  int32_t limit;

  _Query2Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_maxDate(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query2Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(maxDate == rhs.maxDate))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query2Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query2Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query2Request &a, Query2Request &b);

std::ostream& operator<<(std::ostream& out, const Query2Request& obj);

typedef struct _Query2Response__isset {
  _Query2Response__isset() : personId(false), personFirstName(false), personLastName(false), messageId(false), messageContent(false), messageCreationDate(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool messageId :1;
  bool messageContent :1;
  bool messageCreationDate :1;
} _Query2Response__isset;

class Query2Response : public virtual ::apache::thrift::TBase {
 public:

  Query2Response(const Query2Response&);
  Query2Response& operator=(const Query2Response&);
  Query2Response() noexcept
                 : personId(0),
                   personFirstName(),
                   personLastName(),
                   messageId(0),
                   messageContent(),
                   messageCreationDate(0) {
  }

  virtual ~Query2Response() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  int64_t messageId;
  std::string messageContent;
  int64_t messageCreationDate;

  _Query2Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_messageId(const int64_t val);

  void __set_messageContent(const std::string& val);

  void __set_messageCreationDate(const int64_t val);

  bool operator == (const Query2Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(messageContent == rhs.messageContent))
      return false;
    if (!(messageCreationDate == rhs.messageCreationDate))
      return false;
    return true;
  }
  bool operator != (const Query2Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query2Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query2Response &a, Query2Response &b);

std::ostream& operator<<(std::ostream& out, const Query2Response& obj);

typedef struct _Query3Request__isset {
  _Query3Request__isset() : personId(false), countryXName(false), countryYName(false), startDate(false), durationDays(false), limit(false) {}
  bool personId :1;
  bool countryXName :1;
  bool countryYName :1;
  bool startDate :1;
  bool durationDays :1;
  bool limit :1;
} _Query3Request__isset;

class Query3Request : public virtual ::apache::thrift::TBase {
 public:

  Query3Request(const Query3Request&);
  Query3Request& operator=(const Query3Request&);
  Query3Request() noexcept
                : personId(0),
                  countryXName(),
                  countryYName(),
                  startDate(0),
                  durationDays(0),
                  limit(0) {
  }

  virtual ~Query3Request() noexcept;
  int64_t personId;
  std::string countryXName;
  std::string countryYName;
  int64_t startDate;
  int32_t durationDays;
  int32_t limit;

  _Query3Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_countryXName(const std::string& val);

  void __set_countryYName(const std::string& val);

  void __set_startDate(const int64_t val);

  void __set_durationDays(const int32_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query3Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(countryXName == rhs.countryXName))
      return false;
    if (!(countryYName == rhs.countryYName))
      return false;
    if (!(startDate == rhs.startDate))
      return false;
    if (!(durationDays == rhs.durationDays))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query3Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query3Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query3Request &a, Query3Request &b);

std::ostream& operator<<(std::ostream& out, const Query3Request& obj);

typedef struct _Query3Response__isset {
  _Query3Response__isset() : personId(false), personFirstName(false), personLastName(false), xCount(false), yCount(false), count(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool xCount :1;
  bool yCount :1;
  bool count :1;
} _Query3Response__isset;

class Query3Response : public virtual ::apache::thrift::TBase {
 public:

  Query3Response(const Query3Response&);
  Query3Response& operator=(const Query3Response&);
  Query3Response() noexcept
                 : personId(0),
                   personFirstName(),
                   personLastName(),
                   xCount(0),
                   yCount(0),
                   count(0) {
  }

  virtual ~Query3Response() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  int32_t xCount;
  int32_t yCount;
  int32_t count;

  _Query3Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_xCount(const int32_t val);

  void __set_yCount(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const Query3Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(xCount == rhs.xCount))
      return false;
    if (!(yCount == rhs.yCount))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const Query3Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query3Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query3Response &a, Query3Response &b);

std::ostream& operator<<(std::ostream& out, const Query3Response& obj);

typedef struct _Query4Request__isset {
  _Query4Request__isset() : personId(false), startDate(false), durationDays(false), limit(false) {}
  bool personId :1;
  bool startDate :1;
  bool durationDays :1;
  bool limit :1;
} _Query4Request__isset;

class Query4Request : public virtual ::apache::thrift::TBase {
 public:

  Query4Request(const Query4Request&) noexcept;
  Query4Request& operator=(const Query4Request&) noexcept;
  Query4Request() noexcept
                : personId(0),
                  startDate(0),
                  durationDays(0),
                  limit(0) {
  }

  virtual ~Query4Request() noexcept;
  int64_t personId;
  int64_t startDate;
  int32_t durationDays;
  int32_t limit;

  _Query4Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_startDate(const int64_t val);

  void __set_durationDays(const int32_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query4Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(startDate == rhs.startDate))
      return false;
    if (!(durationDays == rhs.durationDays))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query4Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query4Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query4Request &a, Query4Request &b);

std::ostream& operator<<(std::ostream& out, const Query4Request& obj);

typedef struct _Query4Response__isset {
  _Query4Response__isset() : tagName(false), postCount(false) {}
  bool tagName :1;
  bool postCount :1;
} _Query4Response__isset;

class Query4Response : public virtual ::apache::thrift::TBase {
 public:

  Query4Response(const Query4Response&);
  Query4Response& operator=(const Query4Response&);
  Query4Response() noexcept
                 : tagName(),
                   postCount(0) {
  }

  virtual ~Query4Response() noexcept;
  std::string tagName;
  int32_t postCount;

  _Query4Response__isset __isset;

  void __set_tagName(const std::string& val);

  void __set_postCount(const int32_t val);

  bool operator == (const Query4Response & rhs) const
  {
    if (!(tagName == rhs.tagName))
      return false;
    if (!(postCount == rhs.postCount))
      return false;
    return true;
  }
  bool operator != (const Query4Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query4Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query4Response &a, Query4Response &b);

std::ostream& operator<<(std::ostream& out, const Query4Response& obj);

typedef struct _Query5Request__isset {
  _Query5Request__isset() : personId(false), minDate(false), limit(false) {}
  bool personId :1;
  bool minDate :1;
  bool limit :1;
} _Query5Request__isset;

class Query5Request : public virtual ::apache::thrift::TBase {
 public:

  Query5Request(const Query5Request&) noexcept;
  Query5Request& operator=(const Query5Request&) noexcept;
  Query5Request() noexcept
                : personId(0),
                  minDate(0),
                  limit(0) {
  }

  virtual ~Query5Request() noexcept;
  int64_t personId;
  int64_t minDate;
  int32_t limit;

  _Query5Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_minDate(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query5Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(minDate == rhs.minDate))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query5Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query5Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query5Request &a, Query5Request &b);

std::ostream& operator<<(std::ostream& out, const Query5Request& obj);

typedef struct _Query5Response__isset {
  _Query5Response__isset() : forumTitle(false), postCount(false) {}
  bool forumTitle :1;
  bool postCount :1;
} _Query5Response__isset;

class Query5Response : public virtual ::apache::thrift::TBase {
 public:

  Query5Response(const Query5Response&);
  Query5Response& operator=(const Query5Response&);
  Query5Response() noexcept
                 : forumTitle(),
                   postCount(0) {
  }

  virtual ~Query5Response() noexcept;
  std::string forumTitle;
  int32_t postCount;

  _Query5Response__isset __isset;

  void __set_forumTitle(const std::string& val);

  void __set_postCount(const int32_t val);

  bool operator == (const Query5Response & rhs) const
  {
    if (!(forumTitle == rhs.forumTitle))
      return false;
    if (!(postCount == rhs.postCount))
      return false;
    return true;
  }
  bool operator != (const Query5Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query5Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query5Response &a, Query5Response &b);

std::ostream& operator<<(std::ostream& out, const Query5Response& obj);

typedef struct _Query6Request__isset {
  _Query6Request__isset() : personId(false), tagName(false), limit(false) {}
  bool personId :1;
  bool tagName :1;
  bool limit :1;
} _Query6Request__isset;

class Query6Request : public virtual ::apache::thrift::TBase {
 public:

  Query6Request(const Query6Request&);
  Query6Request& operator=(const Query6Request&);
  Query6Request() noexcept
                : personId(0),
                  tagName(),
                  limit(0) {
  }

  virtual ~Query6Request() noexcept;
  int64_t personId;
  std::string tagName;
  int32_t limit;

  _Query6Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_tagName(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const Query6Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(tagName == rhs.tagName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query6Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query6Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query6Request &a, Query6Request &b);

std::ostream& operator<<(std::ostream& out, const Query6Request& obj);

typedef struct _Query6Response__isset {
  _Query6Response__isset() : tagName(false), postCount(false) {}
  bool tagName :1;
  bool postCount :1;
} _Query6Response__isset;

class Query6Response : public virtual ::apache::thrift::TBase {
 public:

  Query6Response(const Query6Response&);
  Query6Response& operator=(const Query6Response&);
  Query6Response() noexcept
                 : tagName(),
                   postCount(0) {
  }

  virtual ~Query6Response() noexcept;
  std::string tagName;
  int32_t postCount;

  _Query6Response__isset __isset;

  void __set_tagName(const std::string& val);

  void __set_postCount(const int32_t val);

  bool operator == (const Query6Response & rhs) const
  {
    if (!(tagName == rhs.tagName))
      return false;
    if (!(postCount == rhs.postCount))
      return false;
    return true;
  }
  bool operator != (const Query6Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query6Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query6Response &a, Query6Response &b);

std::ostream& operator<<(std::ostream& out, const Query6Response& obj);

typedef struct _Query7Request__isset {
  _Query7Request__isset() : personId(false), limit(false) {}
  bool personId :1;
  bool limit :1;
} _Query7Request__isset;

class Query7Request : public virtual ::apache::thrift::TBase {
 public:

  Query7Request(const Query7Request&) noexcept;
  Query7Request& operator=(const Query7Request&) noexcept;
  Query7Request() noexcept
                : personId(0),
                  limit(0) {
  }

  virtual ~Query7Request() noexcept;
  int64_t personId;
  int32_t limit;

  _Query7Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query7Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query7Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query7Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query7Request &a, Query7Request &b);

std::ostream& operator<<(std::ostream& out, const Query7Request& obj);

typedef struct _Query7Response__isset {
  _Query7Response__isset() : personId(false), personFirstName(false), personLastName(false), likeCreationDate(false), commentOrPostId(false), commentOrPostContent(false), minutesLatency(false), isNew(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool likeCreationDate :1;
  bool commentOrPostId :1;
  bool commentOrPostContent :1;
  bool minutesLatency :1;
  bool isNew :1;
} _Query7Response__isset;

class Query7Response : public virtual ::apache::thrift::TBase {
 public:

  Query7Response(const Query7Response&);
  Query7Response& operator=(const Query7Response&);
  Query7Response() noexcept
                 : personId(0),
                   personFirstName(),
                   personLastName(),
                   likeCreationDate(0),
                   commentOrPostId(0),
                   commentOrPostContent(),
                   minutesLatency(0),
                   isNew(0) {
  }

  virtual ~Query7Response() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  int64_t likeCreationDate;
  int64_t commentOrPostId;
  std::string commentOrPostContent;
  int32_t minutesLatency;
  bool isNew;

  _Query7Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_likeCreationDate(const int64_t val);

  void __set_commentOrPostId(const int64_t val);

  void __set_commentOrPostContent(const std::string& val);

  void __set_minutesLatency(const int32_t val);

  void __set_isNew(const bool val);

  bool operator == (const Query7Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(likeCreationDate == rhs.likeCreationDate))
      return false;
    if (!(commentOrPostId == rhs.commentOrPostId))
      return false;
    if (!(commentOrPostContent == rhs.commentOrPostContent))
      return false;
    if (!(minutesLatency == rhs.minutesLatency))
      return false;
    if (!(isNew == rhs.isNew))
      return false;
    return true;
  }
  bool operator != (const Query7Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query7Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query7Response &a, Query7Response &b);

std::ostream& operator<<(std::ostream& out, const Query7Response& obj);

typedef struct _Query8Request__isset {
  _Query8Request__isset() : personId(false), limit(false) {}
  bool personId :1;
  bool limit :1;
} _Query8Request__isset;

class Query8Request : public virtual ::apache::thrift::TBase {
 public:

  Query8Request(const Query8Request&) noexcept;
  Query8Request& operator=(const Query8Request&) noexcept;
  Query8Request() noexcept
                : personId(0),
                  limit(0) {
  }

  virtual ~Query8Request() noexcept;
  int64_t personId;
  int32_t limit;

  _Query8Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query8Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query8Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query8Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query8Request &a, Query8Request &b);

std::ostream& operator<<(std::ostream& out, const Query8Request& obj);

typedef struct _Query8Response__isset {
  _Query8Response__isset() : personId(false), personFirstName(false), personLastName(false), commentCreationDate(false), commentId(false), commentContent(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool commentCreationDate :1;
  bool commentId :1;
  bool commentContent :1;
} _Query8Response__isset;

class Query8Response : public virtual ::apache::thrift::TBase {
 public:

  Query8Response(const Query8Response&);
  Query8Response& operator=(const Query8Response&);
  Query8Response() noexcept
                 : personId(0),
                   personFirstName(),
                   personLastName(),
                   commentCreationDate(0),
                   commentId(0),
                   commentContent() {
  }

  virtual ~Query8Response() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  int64_t commentCreationDate;
  int64_t commentId;
  std::string commentContent;

  _Query8Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_commentCreationDate(const int64_t val);

  void __set_commentId(const int64_t val);

  void __set_commentContent(const std::string& val);

  bool operator == (const Query8Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(commentCreationDate == rhs.commentCreationDate))
      return false;
    if (!(commentId == rhs.commentId))
      return false;
    if (!(commentContent == rhs.commentContent))
      return false;
    return true;
  }
  bool operator != (const Query8Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query8Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query8Response &a, Query8Response &b);

std::ostream& operator<<(std::ostream& out, const Query8Response& obj);

typedef struct _Query9Request__isset {
  _Query9Request__isset() : personId(false), maxDate(false), limit(false) {}
  bool personId :1;
  bool maxDate :1;
  bool limit :1;
} _Query9Request__isset;

class Query9Request : public virtual ::apache::thrift::TBase {
 public:

  Query9Request(const Query9Request&) noexcept;
  Query9Request& operator=(const Query9Request&) noexcept;
  Query9Request() noexcept
                : personId(0),
                  maxDate(0),
                  limit(0) {
  }

  virtual ~Query9Request() noexcept;
  int64_t personId;
  int64_t maxDate;
  int32_t limit;

  _Query9Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_maxDate(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query9Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(maxDate == rhs.maxDate))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query9Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query9Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query9Request &a, Query9Request &b);

std::ostream& operator<<(std::ostream& out, const Query9Request& obj);

typedef struct _Query9Response__isset {
  _Query9Response__isset() : personId(false), personFirstName(false), personLastName(false), messageId(false), messageContent(false), messageCreationDate(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool messageId :1;
  bool messageContent :1;
  bool messageCreationDate :1;
} _Query9Response__isset;

class Query9Response : public virtual ::apache::thrift::TBase {
 public:

  Query9Response(const Query9Response&);
  Query9Response& operator=(const Query9Response&);
  Query9Response() noexcept
                 : personId(0),
                   personFirstName(),
                   personLastName(),
                   messageId(0),
                   messageContent(),
                   messageCreationDate(0) {
  }

  virtual ~Query9Response() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  int64_t messageId;
  std::string messageContent;
  int64_t messageCreationDate;

  _Query9Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_messageId(const int64_t val);

  void __set_messageContent(const std::string& val);

  void __set_messageCreationDate(const int64_t val);

  bool operator == (const Query9Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(messageContent == rhs.messageContent))
      return false;
    if (!(messageCreationDate == rhs.messageCreationDate))
      return false;
    return true;
  }
  bool operator != (const Query9Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query9Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query9Response &a, Query9Response &b);

std::ostream& operator<<(std::ostream& out, const Query9Response& obj);

typedef struct _Query10Request__isset {
  _Query10Request__isset() : personId(false), month(false), limit(false) {}
  bool personId :1;
  bool month :1;
  bool limit :1;
} _Query10Request__isset;

class Query10Request : public virtual ::apache::thrift::TBase {
 public:

  Query10Request(const Query10Request&) noexcept;
  Query10Request& operator=(const Query10Request&) noexcept;
  Query10Request() noexcept
                 : personId(0),
                   month(0),
                   limit(0) {
  }

  virtual ~Query10Request() noexcept;
  int64_t personId;
  int32_t month;
  int32_t limit;

  _Query10Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_month(const int32_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query10Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(month == rhs.month))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query10Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query10Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query10Request &a, Query10Request &b);

std::ostream& operator<<(std::ostream& out, const Query10Request& obj);

typedef struct _Query10Response__isset {
  _Query10Response__isset() : personId(false), personFirstName(false), personLastName(false), commonInterestSore(false), personGender(false), personCityName(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool commonInterestSore :1;
  bool personGender :1;
  bool personCityName :1;
} _Query10Response__isset;

class Query10Response : public virtual ::apache::thrift::TBase {
 public:

  Query10Response(const Query10Response&);
  Query10Response& operator=(const Query10Response&);
  Query10Response() noexcept
                  : personId(0),
                    personFirstName(),
                    personLastName(),
                    commonInterestSore(0),
                    personGender(),
                    personCityName() {
  }

  virtual ~Query10Response() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  int32_t commonInterestSore;
  std::string personGender;
  std::string personCityName;

  _Query10Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_commonInterestSore(const int32_t val);

  void __set_personGender(const std::string& val);

  void __set_personCityName(const std::string& val);

  bool operator == (const Query10Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(commonInterestSore == rhs.commonInterestSore))
      return false;
    if (!(personGender == rhs.personGender))
      return false;
    if (!(personCityName == rhs.personCityName))
      return false;
    return true;
  }
  bool operator != (const Query10Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query10Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query10Response &a, Query10Response &b);

std::ostream& operator<<(std::ostream& out, const Query10Response& obj);

typedef struct _Query11Request__isset {
  _Query11Request__isset() : personId(false), countryName(false), workFromYear(false), limit(false) {}
  bool personId :1;
  bool countryName :1;
  bool workFromYear :1;
  bool limit :1;
} _Query11Request__isset;

class Query11Request : public virtual ::apache::thrift::TBase {
 public:

  Query11Request(const Query11Request&);
  Query11Request& operator=(const Query11Request&);
  Query11Request() noexcept
                 : personId(0),
                   countryName(),
                   workFromYear(0),
                   limit(0) {
  }

  virtual ~Query11Request() noexcept;
  int64_t personId;
  std::string countryName;
  int32_t workFromYear;
  int32_t limit;

  _Query11Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_countryName(const std::string& val);

  void __set_workFromYear(const int32_t val);

  void __set_limit(const int32_t val);

  bool operator == (const Query11Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(countryName == rhs.countryName))
      return false;
    if (!(workFromYear == rhs.workFromYear))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query11Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query11Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query11Request &a, Query11Request &b);

std::ostream& operator<<(std::ostream& out, const Query11Request& obj);

typedef struct _Query11Response__isset {
  _Query11Response__isset() : personId(false), personFirstName(false), personLastName(false), organizationName(false), organizationWorkFromYear(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool organizationName :1;
  bool organizationWorkFromYear :1;
} _Query11Response__isset;

class Query11Response : public virtual ::apache::thrift::TBase {
 public:

  Query11Response(const Query11Response&);
  Query11Response& operator=(const Query11Response&);
  Query11Response() noexcept
                  : personId(0),
                    personFirstName(),
                    personLastName(),
                    organizationName(),
                    organizationWorkFromYear(0) {
  }

  virtual ~Query11Response() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  std::string organizationName;
  int32_t organizationWorkFromYear;

  _Query11Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_organizationName(const std::string& val);

  void __set_organizationWorkFromYear(const int32_t val);

  bool operator == (const Query11Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(organizationName == rhs.organizationName))
      return false;
    if (!(organizationWorkFromYear == rhs.organizationWorkFromYear))
      return false;
    return true;
  }
  bool operator != (const Query11Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query11Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query11Response &a, Query11Response &b);

std::ostream& operator<<(std::ostream& out, const Query11Response& obj);

typedef struct _Query12Request__isset {
  _Query12Request__isset() : personId(false), tagClassName(false), limit(false) {}
  bool personId :1;
  bool tagClassName :1;
  bool limit :1;
} _Query12Request__isset;

class Query12Request : public virtual ::apache::thrift::TBase {
 public:

  Query12Request(const Query12Request&);
  Query12Request& operator=(const Query12Request&);
  Query12Request() noexcept
                 : personId(0),
                   tagClassName(),
                   limit(0) {
  }

  virtual ~Query12Request() noexcept;
  int64_t personId;
  std::string tagClassName;
  int32_t limit;

  _Query12Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_tagClassName(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const Query12Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(tagClassName == rhs.tagClassName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const Query12Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query12Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query12Request &a, Query12Request &b);

std::ostream& operator<<(std::ostream& out, const Query12Request& obj);

typedef struct _Query12Response__isset {
  _Query12Response__isset() : personId(false), personFirstName(false), personLastName(false), tagNames(false), replyCount(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool tagNames :1;
  bool replyCount :1;
} _Query12Response__isset;

class Query12Response : public virtual ::apache::thrift::TBase {
 public:

  Query12Response(const Query12Response&);
  Query12Response& operator=(const Query12Response&);
  Query12Response() noexcept
                  : personId(0),
                    personFirstName(),
                    personLastName(),
                    replyCount(0) {
  }

  virtual ~Query12Response() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  std::vector<std::string>  tagNames;
  int32_t replyCount;

  _Query12Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_tagNames(const std::vector<std::string> & val);

  void __set_replyCount(const int32_t val);

  bool operator == (const Query12Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(tagNames == rhs.tagNames))
      return false;
    if (!(replyCount == rhs.replyCount))
      return false;
    return true;
  }
  bool operator != (const Query12Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query12Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query12Response &a, Query12Response &b);

std::ostream& operator<<(std::ostream& out, const Query12Response& obj);

typedef struct _Query13Request__isset {
  _Query13Request__isset() : person1Id(false), person2Id(false) {}
  bool person1Id :1;
  bool person2Id :1;
} _Query13Request__isset;

class Query13Request : public virtual ::apache::thrift::TBase {
 public:

  Query13Request(const Query13Request&) noexcept;
  Query13Request& operator=(const Query13Request&) noexcept;
  Query13Request() noexcept
                 : person1Id(0),
                   person2Id(0) {
  }

  virtual ~Query13Request() noexcept;
  int64_t person1Id;
  int64_t person2Id;

  _Query13Request__isset __isset;

  void __set_person1Id(const int64_t val);

  void __set_person2Id(const int64_t val);

  bool operator == (const Query13Request & rhs) const
  {
    if (!(person1Id == rhs.person1Id))
      return false;
    if (!(person2Id == rhs.person2Id))
      return false;
    return true;
  }
  bool operator != (const Query13Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query13Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query13Request &a, Query13Request &b);

std::ostream& operator<<(std::ostream& out, const Query13Request& obj);

typedef struct _Query13Response__isset {
  _Query13Response__isset() : shortestPathLength(false) {}
  bool shortestPathLength :1;
} _Query13Response__isset;

class Query13Response : public virtual ::apache::thrift::TBase {
 public:

  Query13Response(const Query13Response&) noexcept;
  Query13Response& operator=(const Query13Response&) noexcept;
  Query13Response() noexcept
                  : shortestPathLength(0) {
  }

  virtual ~Query13Response() noexcept;
  int32_t shortestPathLength;

  _Query13Response__isset __isset;

  void __set_shortestPathLength(const int32_t val);

  bool operator == (const Query13Response & rhs) const
  {
    if (!(shortestPathLength == rhs.shortestPathLength))
      return false;
    return true;
  }
  bool operator != (const Query13Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query13Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query13Response &a, Query13Response &b);

std::ostream& operator<<(std::ostream& out, const Query13Response& obj);

typedef struct _Query14Request__isset {
  _Query14Request__isset() : person1Id(false), person2Id(false) {}
  bool person1Id :1;
  bool person2Id :1;
} _Query14Request__isset;

class Query14Request : public virtual ::apache::thrift::TBase {
 public:

  Query14Request(const Query14Request&) noexcept;
  Query14Request& operator=(const Query14Request&) noexcept;
  Query14Request() noexcept
                 : person1Id(0),
                   person2Id(0) {
  }

  virtual ~Query14Request() noexcept;
  int64_t person1Id;
  int64_t person2Id;

  _Query14Request__isset __isset;

  void __set_person1Id(const int64_t val);

  void __set_person2Id(const int64_t val);

  bool operator == (const Query14Request & rhs) const
  {
    if (!(person1Id == rhs.person1Id))
      return false;
    if (!(person2Id == rhs.person2Id))
      return false;
    return true;
  }
  bool operator != (const Query14Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query14Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query14Request &a, Query14Request &b);

std::ostream& operator<<(std::ostream& out, const Query14Request& obj);

typedef struct _Query14Response__isset {
  _Query14Response__isset() : personIdsInPath(false), pathWeight(false) {}
  bool personIdsInPath :1;
  bool pathWeight :1;
} _Query14Response__isset;

class Query14Response : public virtual ::apache::thrift::TBase {
 public:

  Query14Response(const Query14Response&);
  Query14Response& operator=(const Query14Response&);
  Query14Response() noexcept
                  : pathWeight(0) {
  }

  virtual ~Query14Response() noexcept;
  std::vector<int64_t>  personIdsInPath;
  double pathWeight;

  _Query14Response__isset __isset;

  void __set_personIdsInPath(const std::vector<int64_t> & val);

  void __set_pathWeight(const double val);

  bool operator == (const Query14Response & rhs) const
  {
    if (!(personIdsInPath == rhs.personIdsInPath))
      return false;
    if (!(pathWeight == rhs.pathWeight))
      return false;
    return true;
  }
  bool operator != (const Query14Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query14Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query14Response &a, Query14Response &b);

std::ostream& operator<<(std::ostream& out, const Query14Response& obj);

typedef struct _ShortQuery1Request__isset {
  _ShortQuery1Request__isset() : personId(false) {}
  bool personId :1;
} _ShortQuery1Request__isset;

class ShortQuery1Request : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery1Request(const ShortQuery1Request&) noexcept;
  ShortQuery1Request& operator=(const ShortQuery1Request&) noexcept;
  ShortQuery1Request() noexcept
                     : personId(0) {
  }

  virtual ~ShortQuery1Request() noexcept;
  int64_t personId;

  _ShortQuery1Request__isset __isset;

  void __set_personId(const int64_t val);

  bool operator == (const ShortQuery1Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const ShortQuery1Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery1Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery1Request &a, ShortQuery1Request &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery1Request& obj);

typedef struct _ShortQuery1Response__isset {
  _ShortQuery1Response__isset() : firstName(false), lastName(false), birthday(false), locationIp(false), browserUsed(false), cityId(false), gender(false), creationDate(false) {}
  bool firstName :1;
  bool lastName :1;
  bool birthday :1;
  bool locationIp :1;
  bool browserUsed :1;
  bool cityId :1;
  bool gender :1;
  bool creationDate :1;
} _ShortQuery1Response__isset;

class ShortQuery1Response : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery1Response(const ShortQuery1Response&);
  ShortQuery1Response& operator=(const ShortQuery1Response&);
  ShortQuery1Response() noexcept
                      : firstName(),
                        lastName(),
                        birthday(0),
                        locationIp(),
                        browserUsed(),
                        cityId(0),
                        gender(),
                        creationDate(0) {
  }

  virtual ~ShortQuery1Response() noexcept;
  std::string firstName;
  std::string lastName;
  int64_t birthday;
  std::string locationIp;
  std::string browserUsed;
  int64_t cityId;
  std::string gender;
  int64_t creationDate;

  _ShortQuery1Response__isset __isset;

  void __set_firstName(const std::string& val);

  void __set_lastName(const std::string& val);

  void __set_birthday(const int64_t val);

  void __set_locationIp(const std::string& val);

  void __set_browserUsed(const std::string& val);

  void __set_cityId(const int64_t val);

  void __set_gender(const std::string& val);

  void __set_creationDate(const int64_t val);

  bool operator == (const ShortQuery1Response & rhs) const
  {
    if (!(firstName == rhs.firstName))
      return false;
    if (!(lastName == rhs.lastName))
      return false;
    if (!(birthday == rhs.birthday))
      return false;
    if (!(locationIp == rhs.locationIp))
      return false;
    if (!(browserUsed == rhs.browserUsed))
      return false;
    if (!(cityId == rhs.cityId))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    return true;
  }
  bool operator != (const ShortQuery1Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery1Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery1Response &a, ShortQuery1Response &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery1Response& obj);

typedef struct _ShortQuery2Request__isset {
  _ShortQuery2Request__isset() : personId(false), limit(false) {}
  bool personId :1;
  bool limit :1;
} _ShortQuery2Request__isset;

class ShortQuery2Request : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery2Request(const ShortQuery2Request&) noexcept;
  ShortQuery2Request& operator=(const ShortQuery2Request&) noexcept;
  ShortQuery2Request() noexcept
                     : personId(0),
                       limit(0) {
  }

  virtual ~ShortQuery2Request() noexcept;
  int64_t personId;
  int32_t limit;

  _ShortQuery2Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const ShortQuery2Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const ShortQuery2Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery2Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery2Request &a, ShortQuery2Request &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery2Request& obj);

typedef struct _ShortQuery2Response__isset {
  _ShortQuery2Response__isset() : messageId(false), messageContent(false), messageCreationDate(false), originalPostId(false), originalPostAuthorId(false), originalPostAuthorFirstName(false), originalPostAuthorLastName(false) {}
  bool messageId :1;
  bool messageContent :1;
  bool messageCreationDate :1;
  bool originalPostId :1;
  bool originalPostAuthorId :1;
  bool originalPostAuthorFirstName :1;
  bool originalPostAuthorLastName :1;
} _ShortQuery2Response__isset;

class ShortQuery2Response : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery2Response(const ShortQuery2Response&);
  ShortQuery2Response& operator=(const ShortQuery2Response&);
  ShortQuery2Response() noexcept
                      : messageId(0),
                        messageContent(),
                        messageCreationDate(0),
                        originalPostId(0),
                        originalPostAuthorId(0),
                        originalPostAuthorFirstName(),
                        originalPostAuthorLastName() {
  }

  virtual ~ShortQuery2Response() noexcept;
  int64_t messageId;
  std::string messageContent;
  int64_t messageCreationDate;
  int64_t originalPostId;
  int64_t originalPostAuthorId;
  std::string originalPostAuthorFirstName;
  std::string originalPostAuthorLastName;

  _ShortQuery2Response__isset __isset;

  void __set_messageId(const int64_t val);

  void __set_messageContent(const std::string& val);

  void __set_messageCreationDate(const int64_t val);

  void __set_originalPostId(const int64_t val);

  void __set_originalPostAuthorId(const int64_t val);

  void __set_originalPostAuthorFirstName(const std::string& val);

  void __set_originalPostAuthorLastName(const std::string& val);

  bool operator == (const ShortQuery2Response & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    if (!(messageContent == rhs.messageContent))
      return false;
    if (!(messageCreationDate == rhs.messageCreationDate))
      return false;
    if (!(originalPostId == rhs.originalPostId))
      return false;
    if (!(originalPostAuthorId == rhs.originalPostAuthorId))
      return false;
    if (!(originalPostAuthorFirstName == rhs.originalPostAuthorFirstName))
      return false;
    if (!(originalPostAuthorLastName == rhs.originalPostAuthorLastName))
      return false;
    return true;
  }
  bool operator != (const ShortQuery2Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery2Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery2Response &a, ShortQuery2Response &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery2Response& obj);

typedef struct _ShortQuery3Request__isset {
  _ShortQuery3Request__isset() : personId(false) {}
  bool personId :1;
} _ShortQuery3Request__isset;

class ShortQuery3Request : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery3Request(const ShortQuery3Request&) noexcept;
  ShortQuery3Request& operator=(const ShortQuery3Request&) noexcept;
  ShortQuery3Request() noexcept
                     : personId(0) {
  }

  virtual ~ShortQuery3Request() noexcept;
  int64_t personId;

  _ShortQuery3Request__isset __isset;

  void __set_personId(const int64_t val);

  bool operator == (const ShortQuery3Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const ShortQuery3Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery3Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery3Request &a, ShortQuery3Request &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery3Request& obj);

typedef struct _ShortQuery3Response__isset {
  _ShortQuery3Response__isset() : personId(false), firstName(false), lastName(false), friendshipCreationDate(false) {}
  bool personId :1;
  bool firstName :1;
  bool lastName :1;
  bool friendshipCreationDate :1;
} _ShortQuery3Response__isset;

class ShortQuery3Response : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery3Response(const ShortQuery3Response&);
  ShortQuery3Response& operator=(const ShortQuery3Response&);
  ShortQuery3Response() noexcept
                      : personId(0),
                        firstName(),
                        lastName(),
                        friendshipCreationDate(0) {
  }

  virtual ~ShortQuery3Response() noexcept;
  int64_t personId;
  std::string firstName;
  std::string lastName;
  int64_t friendshipCreationDate;

  _ShortQuery3Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_firstName(const std::string& val);

  void __set_lastName(const std::string& val);

  void __set_friendshipCreationDate(const int64_t val);

  bool operator == (const ShortQuery3Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(firstName == rhs.firstName))
      return false;
    if (!(lastName == rhs.lastName))
      return false;
    if (!(friendshipCreationDate == rhs.friendshipCreationDate))
      return false;
    return true;
  }
  bool operator != (const ShortQuery3Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery3Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery3Response &a, ShortQuery3Response &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery3Response& obj);

typedef struct _ShortQuery4Request__isset {
  _ShortQuery4Request__isset() : messageId(false) {}
  bool messageId :1;
} _ShortQuery4Request__isset;

class ShortQuery4Request : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery4Request(const ShortQuery4Request&) noexcept;
  ShortQuery4Request& operator=(const ShortQuery4Request&) noexcept;
  ShortQuery4Request() noexcept
                     : messageId(0) {
  }

  virtual ~ShortQuery4Request() noexcept;
  int64_t messageId;

  _ShortQuery4Request__isset __isset;

  void __set_messageId(const int64_t val);

  bool operator == (const ShortQuery4Request & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const ShortQuery4Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery4Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery4Request &a, ShortQuery4Request &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery4Request& obj);

typedef struct _ShortQuery4Response__isset {
  _ShortQuery4Response__isset() : messageCreationDate(false), messageContent(false) {}
  bool messageCreationDate :1;
  bool messageContent :1;
} _ShortQuery4Response__isset;

class ShortQuery4Response : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery4Response(const ShortQuery4Response&);
  ShortQuery4Response& operator=(const ShortQuery4Response&);
  ShortQuery4Response() noexcept
                      : messageCreationDate(0),
                        messageContent() {
  }

  virtual ~ShortQuery4Response() noexcept;
  int64_t messageCreationDate;
  std::string messageContent;

  _ShortQuery4Response__isset __isset;

  void __set_messageCreationDate(const int64_t val);

  void __set_messageContent(const std::string& val);

  bool operator == (const ShortQuery4Response & rhs) const
  {
    if (!(messageCreationDate == rhs.messageCreationDate))
      return false;
    if (!(messageContent == rhs.messageContent))
      return false;
    return true;
  }
  bool operator != (const ShortQuery4Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery4Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery4Response &a, ShortQuery4Response &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery4Response& obj);

typedef struct _ShortQuery5Request__isset {
  _ShortQuery5Request__isset() : messageId(false) {}
  bool messageId :1;
} _ShortQuery5Request__isset;

class ShortQuery5Request : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery5Request(const ShortQuery5Request&) noexcept;
  ShortQuery5Request& operator=(const ShortQuery5Request&) noexcept;
  ShortQuery5Request() noexcept
                     : messageId(0) {
  }

  virtual ~ShortQuery5Request() noexcept;
  int64_t messageId;

  _ShortQuery5Request__isset __isset;

  void __set_messageId(const int64_t val);

  bool operator == (const ShortQuery5Request & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const ShortQuery5Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery5Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery5Request &a, ShortQuery5Request &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery5Request& obj);

typedef struct _ShortQuery5Response__isset {
  _ShortQuery5Response__isset() : personId(false), firstName(false), lastName(false) {}
  bool personId :1;
  bool firstName :1;
  bool lastName :1;
} _ShortQuery5Response__isset;

class ShortQuery5Response : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery5Response(const ShortQuery5Response&);
  ShortQuery5Response& operator=(const ShortQuery5Response&);
  ShortQuery5Response() noexcept
                      : personId(0),
                        firstName(),
                        lastName() {
  }

  virtual ~ShortQuery5Response() noexcept;
  int64_t personId;
  std::string firstName;
  std::string lastName;

  _ShortQuery5Response__isset __isset;

  void __set_personId(const int64_t val);

  void __set_firstName(const std::string& val);

  void __set_lastName(const std::string& val);

  bool operator == (const ShortQuery5Response & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(firstName == rhs.firstName))
      return false;
    if (!(lastName == rhs.lastName))
      return false;
    return true;
  }
  bool operator != (const ShortQuery5Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery5Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery5Response &a, ShortQuery5Response &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery5Response& obj);

typedef struct _ShortQuery6Request__isset {
  _ShortQuery6Request__isset() : messageId(false) {}
  bool messageId :1;
} _ShortQuery6Request__isset;

class ShortQuery6Request : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery6Request(const ShortQuery6Request&) noexcept;
  ShortQuery6Request& operator=(const ShortQuery6Request&) noexcept;
  ShortQuery6Request() noexcept
                     : messageId(0) {
  }

  virtual ~ShortQuery6Request() noexcept;
  int64_t messageId;

  _ShortQuery6Request__isset __isset;

  void __set_messageId(const int64_t val);

  bool operator == (const ShortQuery6Request & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const ShortQuery6Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery6Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery6Request &a, ShortQuery6Request &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery6Request& obj);

typedef struct _ShortQuery6Response__isset {
  _ShortQuery6Response__isset() : forumId(false), forumTitle(false), moderatorId(false), moderatorFirstName(false), moderatorLastName(false) {}
  bool forumId :1;
  bool forumTitle :1;
  bool moderatorId :1;
  bool moderatorFirstName :1;
  bool moderatorLastName :1;
} _ShortQuery6Response__isset;

class ShortQuery6Response : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery6Response(const ShortQuery6Response&);
  ShortQuery6Response& operator=(const ShortQuery6Response&);
  ShortQuery6Response() noexcept
                      : forumId(0),
                        forumTitle(),
                        moderatorId(0),
                        moderatorFirstName(),
                        moderatorLastName() {
  }

  virtual ~ShortQuery6Response() noexcept;
  int64_t forumId;
  std::string forumTitle;
  int64_t moderatorId;
  std::string moderatorFirstName;
  std::string moderatorLastName;

  _ShortQuery6Response__isset __isset;

  void __set_forumId(const int64_t val);

  void __set_forumTitle(const std::string& val);

  void __set_moderatorId(const int64_t val);

  void __set_moderatorFirstName(const std::string& val);

  void __set_moderatorLastName(const std::string& val);

  bool operator == (const ShortQuery6Response & rhs) const
  {
    if (!(forumId == rhs.forumId))
      return false;
    if (!(forumTitle == rhs.forumTitle))
      return false;
    if (!(moderatorId == rhs.moderatorId))
      return false;
    if (!(moderatorFirstName == rhs.moderatorFirstName))
      return false;
    if (!(moderatorLastName == rhs.moderatorLastName))
      return false;
    return true;
  }
  bool operator != (const ShortQuery6Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery6Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery6Response &a, ShortQuery6Response &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery6Response& obj);

typedef struct _ShortQuery7Request__isset {
  _ShortQuery7Request__isset() : messageId(false) {}
  bool messageId :1;
} _ShortQuery7Request__isset;

class ShortQuery7Request : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery7Request(const ShortQuery7Request&) noexcept;
  ShortQuery7Request& operator=(const ShortQuery7Request&) noexcept;
  ShortQuery7Request() noexcept
                     : messageId(0) {
  }

  virtual ~ShortQuery7Request() noexcept;
  int64_t messageId;

  _ShortQuery7Request__isset __isset;

  void __set_messageId(const int64_t val);

  bool operator == (const ShortQuery7Request & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const ShortQuery7Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery7Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery7Request &a, ShortQuery7Request &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery7Request& obj);

typedef struct _ShortQuery7Response__isset {
  _ShortQuery7Response__isset() : commentId(false), commentContent(false), commentCreationDate(false), replyAuthorId(false), replyAuthorFirstName(false), replyAuthorLastName(false), replyAuthorKnowsOriginalMassageAuthor(false) {}
  bool commentId :1;
  bool commentContent :1;
  bool commentCreationDate :1;
  bool replyAuthorId :1;
  bool replyAuthorFirstName :1;
  bool replyAuthorLastName :1;
  bool replyAuthorKnowsOriginalMassageAuthor :1;
} _ShortQuery7Response__isset;

class ShortQuery7Response : public virtual ::apache::thrift::TBase {
 public:

  ShortQuery7Response(const ShortQuery7Response&);
  ShortQuery7Response& operator=(const ShortQuery7Response&);
  ShortQuery7Response() noexcept
                      : commentId(0),
                        commentContent(),
                        commentCreationDate(0),
                        replyAuthorId(0),
                        replyAuthorFirstName(),
                        replyAuthorLastName(),
                        replyAuthorKnowsOriginalMassageAuthor(0) {
  }

  virtual ~ShortQuery7Response() noexcept;
  int64_t commentId;
  std::string commentContent;
  int64_t commentCreationDate;
  int64_t replyAuthorId;
  std::string replyAuthorFirstName;
  std::string replyAuthorLastName;
  bool replyAuthorKnowsOriginalMassageAuthor;

  _ShortQuery7Response__isset __isset;

  void __set_commentId(const int64_t val);

  void __set_commentContent(const std::string& val);

  void __set_commentCreationDate(const int64_t val);

  void __set_replyAuthorId(const int64_t val);

  void __set_replyAuthorFirstName(const std::string& val);

  void __set_replyAuthorLastName(const std::string& val);

  void __set_replyAuthorKnowsOriginalMassageAuthor(const bool val);

  bool operator == (const ShortQuery7Response & rhs) const
  {
    if (!(commentId == rhs.commentId))
      return false;
    if (!(commentContent == rhs.commentContent))
      return false;
    if (!(commentCreationDate == rhs.commentCreationDate))
      return false;
    if (!(replyAuthorId == rhs.replyAuthorId))
      return false;
    if (!(replyAuthorFirstName == rhs.replyAuthorFirstName))
      return false;
    if (!(replyAuthorLastName == rhs.replyAuthorLastName))
      return false;
    if (!(replyAuthorKnowsOriginalMassageAuthor == rhs.replyAuthorKnowsOriginalMassageAuthor))
      return false;
    return true;
  }
  bool operator != (const ShortQuery7Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortQuery7Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortQuery7Response &a, ShortQuery7Response &b);

std::ostream& operator<<(std::ostream& out, const ShortQuery7Response& obj);

typedef struct _Update1Request__isset {
  _Update1Request__isset() : personId(false), personFirstName(false), personLastName(false), gender(false), birthday(false), creationDate(false), locationIp(false), browserUsed(false), cityId(false), languages(false), emails(false), tagIds(false), studyAt_id(false), studyAt_year(false), workAt_id(false), workAt_year(false) {}
  bool personId :1;
  bool personFirstName :1;
  bool personLastName :1;
  bool gender :1;
  bool birthday :1;
  bool creationDate :1;
  bool locationIp :1;
  bool browserUsed :1;
  bool cityId :1;
  bool languages :1;
  bool emails :1;
  bool tagIds :1;
  bool studyAt_id :1;
  bool studyAt_year :1;
  bool workAt_id :1;
  bool workAt_year :1;
} _Update1Request__isset;

class Update1Request : public virtual ::apache::thrift::TBase {
 public:

  Update1Request(const Update1Request&);
  Update1Request& operator=(const Update1Request&);
  Update1Request() noexcept
                 : personId(0),
                   personFirstName(),
                   personLastName(),
                   gender(),
                   birthday(0),
                   creationDate(0),
                   locationIp(),
                   browserUsed(),
                   cityId(0) {
  }

  virtual ~Update1Request() noexcept;
  int64_t personId;
  std::string personFirstName;
  std::string personLastName;
  std::string gender;
  int64_t birthday;
  int64_t creationDate;
  std::string locationIp;
  std::string browserUsed;
  int64_t cityId;
  std::vector<std::string>  languages;
  std::vector<std::string>  emails;
  std::vector<int64_t>  tagIds;
  std::vector<int64_t>  studyAt_id;
  std::vector<int32_t>  studyAt_year;
  std::vector<int64_t>  workAt_id;
  std::vector<int32_t>  workAt_year;

  _Update1Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_personFirstName(const std::string& val);

  void __set_personLastName(const std::string& val);

  void __set_gender(const std::string& val);

  void __set_birthday(const int64_t val);

  void __set_creationDate(const int64_t val);

  void __set_locationIp(const std::string& val);

  void __set_browserUsed(const std::string& val);

  void __set_cityId(const int64_t val);

  void __set_languages(const std::vector<std::string> & val);

  void __set_emails(const std::vector<std::string> & val);

  void __set_tagIds(const std::vector<int64_t> & val);

  void __set_studyAt_id(const std::vector<int64_t> & val);

  void __set_studyAt_year(const std::vector<int32_t> & val);

  void __set_workAt_id(const std::vector<int64_t> & val);

  void __set_workAt_year(const std::vector<int32_t> & val);

  bool operator == (const Update1Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(personFirstName == rhs.personFirstName))
      return false;
    if (!(personLastName == rhs.personLastName))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(birthday == rhs.birthday))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    if (!(locationIp == rhs.locationIp))
      return false;
    if (!(browserUsed == rhs.browserUsed))
      return false;
    if (!(cityId == rhs.cityId))
      return false;
    if (!(languages == rhs.languages))
      return false;
    if (!(emails == rhs.emails))
      return false;
    if (!(tagIds == rhs.tagIds))
      return false;
    if (!(studyAt_id == rhs.studyAt_id))
      return false;
    if (!(studyAt_year == rhs.studyAt_year))
      return false;
    if (!(workAt_id == rhs.workAt_id))
      return false;
    if (!(workAt_year == rhs.workAt_year))
      return false;
    return true;
  }
  bool operator != (const Update1Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Update1Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Update1Request &a, Update1Request &b);

std::ostream& operator<<(std::ostream& out, const Update1Request& obj);

typedef struct _Update2Request__isset {
  _Update2Request__isset() : personId(false), postId(false), creationDate(false) {}
  bool personId :1;
  bool postId :1;
  bool creationDate :1;
} _Update2Request__isset;

class Update2Request : public virtual ::apache::thrift::TBase {
 public:

  Update2Request(const Update2Request&) noexcept;
  Update2Request& operator=(const Update2Request&) noexcept;
  Update2Request() noexcept
                 : personId(0),
                   postId(0),
                   creationDate(0) {
  }

  virtual ~Update2Request() noexcept;
  int64_t personId;
  int64_t postId;
  int64_t creationDate;

  _Update2Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_postId(const int64_t val);

  void __set_creationDate(const int64_t val);

  bool operator == (const Update2Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(postId == rhs.postId))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    return true;
  }
  bool operator != (const Update2Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Update2Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Update2Request &a, Update2Request &b);

std::ostream& operator<<(std::ostream& out, const Update2Request& obj);

typedef struct _Update3Request__isset {
  _Update3Request__isset() : personId(false), commentId(false), creationDate(false) {}
  bool personId :1;
  bool commentId :1;
  bool creationDate :1;
} _Update3Request__isset;

class Update3Request : public virtual ::apache::thrift::TBase {
 public:

  Update3Request(const Update3Request&) noexcept;
  Update3Request& operator=(const Update3Request&) noexcept;
  Update3Request() noexcept
                 : personId(0),
                   commentId(0),
                   creationDate(0) {
  }

  virtual ~Update3Request() noexcept;
  int64_t personId;
  int64_t commentId;
  int64_t creationDate;

  _Update3Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_commentId(const int64_t val);

  void __set_creationDate(const int64_t val);

  bool operator == (const Update3Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(commentId == rhs.commentId))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    return true;
  }
  bool operator != (const Update3Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Update3Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Update3Request &a, Update3Request &b);

std::ostream& operator<<(std::ostream& out, const Update3Request& obj);

typedef struct _Update4Request__isset {
  _Update4Request__isset() : forumId(false), forumTitle(false), creationDate(false), moderatorPersonId(false), tagIds(false) {}
  bool forumId :1;
  bool forumTitle :1;
  bool creationDate :1;
  bool moderatorPersonId :1;
  bool tagIds :1;
} _Update4Request__isset;

class Update4Request : public virtual ::apache::thrift::TBase {
 public:

  Update4Request(const Update4Request&);
  Update4Request& operator=(const Update4Request&);
  Update4Request() noexcept
                 : forumId(0),
                   forumTitle(),
                   creationDate(0),
                   moderatorPersonId(0) {
  }

  virtual ~Update4Request() noexcept;
  int64_t forumId;
  std::string forumTitle;
  int64_t creationDate;
  int64_t moderatorPersonId;
  std::vector<int64_t>  tagIds;

  _Update4Request__isset __isset;

  void __set_forumId(const int64_t val);

  void __set_forumTitle(const std::string& val);

  void __set_creationDate(const int64_t val);

  void __set_moderatorPersonId(const int64_t val);

  void __set_tagIds(const std::vector<int64_t> & val);

  bool operator == (const Update4Request & rhs) const
  {
    if (!(forumId == rhs.forumId))
      return false;
    if (!(forumTitle == rhs.forumTitle))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    if (!(moderatorPersonId == rhs.moderatorPersonId))
      return false;
    if (!(tagIds == rhs.tagIds))
      return false;
    return true;
  }
  bool operator != (const Update4Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Update4Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Update4Request &a, Update4Request &b);

std::ostream& operator<<(std::ostream& out, const Update4Request& obj);

typedef struct _Update5Request__isset {
  _Update5Request__isset() : personId(false), forumId(false), joinDate(false) {}
  bool personId :1;
  bool forumId :1;
  bool joinDate :1;
} _Update5Request__isset;

class Update5Request : public virtual ::apache::thrift::TBase {
 public:

  Update5Request(const Update5Request&) noexcept;
  Update5Request& operator=(const Update5Request&) noexcept;
  Update5Request() noexcept
                 : personId(0),
                   forumId(0),
                   joinDate(0) {
  }

  virtual ~Update5Request() noexcept;
  int64_t personId;
  int64_t forumId;
  int64_t joinDate;

  _Update5Request__isset __isset;

  void __set_personId(const int64_t val);

  void __set_forumId(const int64_t val);

  void __set_joinDate(const int64_t val);

  bool operator == (const Update5Request & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(forumId == rhs.forumId))
      return false;
    if (!(joinDate == rhs.joinDate))
      return false;
    return true;
  }
  bool operator != (const Update5Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Update5Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Update5Request &a, Update5Request &b);

std::ostream& operator<<(std::ostream& out, const Update5Request& obj);

typedef struct _Update6Request__isset {
  _Update6Request__isset() : postId(false), imageFile(false), creationDate(false), locationIp(false), browserUsed(false), language(false), content(false), length(false), authorPersonId(false), forumId(false), countryId(false), tagIds(false) {}
  bool postId :1;
  bool imageFile :1;
  bool creationDate :1;
  bool locationIp :1;
  bool browserUsed :1;
  bool language :1;
  bool content :1;
  bool length :1;
  bool authorPersonId :1;
  bool forumId :1;
  bool countryId :1;
  bool tagIds :1;
} _Update6Request__isset;

class Update6Request : public virtual ::apache::thrift::TBase {
 public:

  Update6Request(const Update6Request&);
  Update6Request& operator=(const Update6Request&);
  Update6Request() noexcept
                 : postId(0),
                   imageFile(),
                   creationDate(0),
                   locationIp(),
                   browserUsed(),
                   language(),
                   content(),
                   length(0),
                   authorPersonId(0),
                   forumId(0),
                   countryId(0) {
  }

  virtual ~Update6Request() noexcept;
  int64_t postId;
  std::string imageFile;
  int64_t creationDate;
  std::string locationIp;
  std::string browserUsed;
  std::string language;
  std::string content;
  int32_t length;
  int64_t authorPersonId;
  int64_t forumId;
  int64_t countryId;
  std::vector<int64_t>  tagIds;

  _Update6Request__isset __isset;

  void __set_postId(const int64_t val);

  void __set_imageFile(const std::string& val);

  void __set_creationDate(const int64_t val);

  void __set_locationIp(const std::string& val);

  void __set_browserUsed(const std::string& val);

  void __set_language(const std::string& val);

  void __set_content(const std::string& val);

  void __set_length(const int32_t val);

  void __set_authorPersonId(const int64_t val);

  void __set_forumId(const int64_t val);

  void __set_countryId(const int64_t val);

  void __set_tagIds(const std::vector<int64_t> & val);

  bool operator == (const Update6Request & rhs) const
  {
    if (!(postId == rhs.postId))
      return false;
    if (!(imageFile == rhs.imageFile))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    if (!(locationIp == rhs.locationIp))
      return false;
    if (!(browserUsed == rhs.browserUsed))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(authorPersonId == rhs.authorPersonId))
      return false;
    if (!(forumId == rhs.forumId))
      return false;
    if (!(countryId == rhs.countryId))
      return false;
    if (!(tagIds == rhs.tagIds))
      return false;
    return true;
  }
  bool operator != (const Update6Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Update6Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Update6Request &a, Update6Request &b);

std::ostream& operator<<(std::ostream& out, const Update6Request& obj);

typedef struct _Update7Request__isset {
  _Update7Request__isset() : commentId(false), creationDate(false), locationIp(false), browserUsed(false), content(false), length(false), authorPersonId(false), countryId(false), replyToPostId(false), replyToCommentId(false), tagIds(false) {}
  bool commentId :1;
  bool creationDate :1;
  bool locationIp :1;
  bool browserUsed :1;
  bool content :1;
  bool length :1;
  bool authorPersonId :1;
  bool countryId :1;
  bool replyToPostId :1;
  bool replyToCommentId :1;
  bool tagIds :1;
} _Update7Request__isset;

class Update7Request : public virtual ::apache::thrift::TBase {
 public:

  Update7Request(const Update7Request&);
  Update7Request& operator=(const Update7Request&);
  Update7Request() noexcept
                 : commentId(0),
                   creationDate(0),
                   locationIp(),
                   browserUsed(),
                   content(),
                   length(0),
                   authorPersonId(0),
                   countryId(0),
                   replyToPostId(0),
                   replyToCommentId(0) {
  }

  virtual ~Update7Request() noexcept;
  int64_t commentId;
  int64_t creationDate;
  std::string locationIp;
  std::string browserUsed;
  std::string content;
  int32_t length;
  int64_t authorPersonId;
  int64_t countryId;
  int64_t replyToPostId;
  int64_t replyToCommentId;
  std::vector<int64_t>  tagIds;

  _Update7Request__isset __isset;

  void __set_commentId(const int64_t val);

  void __set_creationDate(const int64_t val);

  void __set_locationIp(const std::string& val);

  void __set_browserUsed(const std::string& val);

  void __set_content(const std::string& val);

  void __set_length(const int32_t val);

  void __set_authorPersonId(const int64_t val);

  void __set_countryId(const int64_t val);

  void __set_replyToPostId(const int64_t val);

  void __set_replyToCommentId(const int64_t val);

  void __set_tagIds(const std::vector<int64_t> & val);

  bool operator == (const Update7Request & rhs) const
  {
    if (!(commentId == rhs.commentId))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    if (!(locationIp == rhs.locationIp))
      return false;
    if (!(browserUsed == rhs.browserUsed))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(authorPersonId == rhs.authorPersonId))
      return false;
    if (!(countryId == rhs.countryId))
      return false;
    if (!(replyToPostId == rhs.replyToPostId))
      return false;
    if (!(replyToCommentId == rhs.replyToCommentId))
      return false;
    if (!(tagIds == rhs.tagIds))
      return false;
    return true;
  }
  bool operator != (const Update7Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Update7Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Update7Request &a, Update7Request &b);

std::ostream& operator<<(std::ostream& out, const Update7Request& obj);

typedef struct _Update8Request__isset {
  _Update8Request__isset() : person1Id(false), person2Id(false), creationDate(false) {}
  bool person1Id :1;
  bool person2Id :1;
  bool creationDate :1;
} _Update8Request__isset;

class Update8Request : public virtual ::apache::thrift::TBase {
 public:

  Update8Request(const Update8Request&) noexcept;
  Update8Request& operator=(const Update8Request&) noexcept;
  Update8Request() noexcept
                 : person1Id(0),
                   person2Id(0),
                   creationDate(0) {
  }

  virtual ~Update8Request() noexcept;
  int64_t person1Id;
  int64_t person2Id;
  int64_t creationDate;

  _Update8Request__isset __isset;

  void __set_person1Id(const int64_t val);

  void __set_person2Id(const int64_t val);

  void __set_creationDate(const int64_t val);

  bool operator == (const Update8Request & rhs) const
  {
    if (!(person1Id == rhs.person1Id))
      return false;
    if (!(person2Id == rhs.person2Id))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    return true;
  }
  bool operator != (const Update8Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Update8Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Update8Request &a, Update8Request &b);

std::ostream& operator<<(std::ostream& out, const Update8Request& obj);

} // namespace

#endif
