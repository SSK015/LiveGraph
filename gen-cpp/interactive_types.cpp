/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "interactive_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace interactive {


}


void Query1Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query1Request::__set_firstName(const std::string& val) {
  this->firstName = val;
}

void Query1Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query1Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query1Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          this->__isset.firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query1Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query1Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->firstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query1Request &a, Query1Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.firstName, b.firstName);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query1Request::Query1Request(const Query1Request& other0) {
  personId = other0.personId;
  firstName = other0.firstName;
  limit = other0.limit;
  __isset = other0.__isset;
}
Query1Request& Query1Request::operator=(const Query1Request& other1) {
  personId = other1.personId;
  firstName = other1.firstName;
  limit = other1.limit;
  __isset = other1.__isset;
  return *this;
}
void Query1Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query1Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "firstName=" << to_string(firstName);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query1Response::~Query1Response() noexcept {
}


void Query1Response::__set_friendId(const int64_t val) {
  this->friendId = val;
}

void Query1Response::__set_friendLastName(const std::string& val) {
  this->friendLastName = val;
}

void Query1Response::__set_distanceFromPerson(const int32_t val) {
  this->distanceFromPerson = val;
}

void Query1Response::__set_friendBirthday(const int64_t val) {
  this->friendBirthday = val;
}

void Query1Response::__set_friendCreationDate(const int64_t val) {
  this->friendCreationDate = val;
}

void Query1Response::__set_friendGender(const std::string& val) {
  this->friendGender = val;
}

void Query1Response::__set_friendBrowserUsed(const std::string& val) {
  this->friendBrowserUsed = val;
}

void Query1Response::__set_friendLocationIp(const std::string& val) {
  this->friendLocationIp = val;
}

void Query1Response::__set_friendEmails(const std::vector<std::string> & val) {
  this->friendEmails = val;
}

void Query1Response::__set_friendLanguages(const std::vector<std::string> & val) {
  this->friendLanguages = val;
}

void Query1Response::__set_friendCityName(const std::string& val) {
  this->friendCityName = val;
}

void Query1Response::__set_friendUniversities_name(const std::vector<std::string> & val) {
  this->friendUniversities_name = val;
}

void Query1Response::__set_friendUniversities_year(const std::vector<int32_t> & val) {
  this->friendUniversities_year = val;
}

void Query1Response::__set_friendUniversities_city(const std::vector<std::string> & val) {
  this->friendUniversities_city = val;
}

void Query1Response::__set_friendCompanies_name(const std::vector<std::string> & val) {
  this->friendCompanies_name = val;
}

void Query1Response::__set_friendCompanies_year(const std::vector<int32_t> & val) {
  this->friendCompanies_year = val;
}

void Query1Response::__set_friendCompanies_city(const std::vector<std::string> & val) {
  this->friendCompanies_city = val;
}
std::ostream& operator<<(std::ostream& out, const Query1Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query1Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->friendId);
          this->__isset.friendId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->friendLastName);
          this->__isset.friendLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->distanceFromPerson);
          this->__isset.distanceFromPerson = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->friendBirthday);
          this->__isset.friendBirthday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->friendCreationDate);
          this->__isset.friendCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->friendGender);
          this->__isset.friendGender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->friendBrowserUsed);
          this->__isset.friendBrowserUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->friendLocationIp);
          this->__isset.friendLocationIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendEmails.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->friendEmails.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->friendEmails[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendEmails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendLanguages.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->friendLanguages.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readString(this->friendLanguages[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendLanguages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->friendCityName);
          this->__isset.friendCityName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendUniversities_name.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->friendUniversities_name.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->friendUniversities_name[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendUniversities_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendUniversities_year.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->friendUniversities_year.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readI32(this->friendUniversities_year[_i21]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendUniversities_year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendUniversities_city.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->friendUniversities_city.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += iprot->readString(this->friendUniversities_city[_i26]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendUniversities_city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendCompanies_name.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->friendCompanies_name.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += iprot->readString(this->friendCompanies_name[_i31]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendCompanies_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendCompanies_year.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->friendCompanies_year.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += iprot->readI32(this->friendCompanies_year[_i36]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendCompanies_year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendCompanies_city.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->friendCompanies_city.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += iprot->readString(this->friendCompanies_city[_i41]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendCompanies_city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query1Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query1Response");

  xfer += oprot->writeFieldBegin("friendId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->friendId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendLastName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->friendLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distanceFromPerson", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->distanceFromPerson);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendBirthday", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->friendBirthday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendCreationDate", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->friendCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendGender", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->friendGender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendBrowserUsed", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->friendBrowserUsed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendLocationIp", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->friendLocationIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendEmails", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->friendEmails.size()));
    std::vector<std::string> ::const_iterator _iter42;
    for (_iter42 = this->friendEmails.begin(); _iter42 != this->friendEmails.end(); ++_iter42)
    {
      xfer += oprot->writeString((*_iter42));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendLanguages", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->friendLanguages.size()));
    std::vector<std::string> ::const_iterator _iter43;
    for (_iter43 = this->friendLanguages.begin(); _iter43 != this->friendLanguages.end(); ++_iter43)
    {
      xfer += oprot->writeString((*_iter43));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendCityName", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->friendCityName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendUniversities_name", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->friendUniversities_name.size()));
    std::vector<std::string> ::const_iterator _iter44;
    for (_iter44 = this->friendUniversities_name.begin(); _iter44 != this->friendUniversities_name.end(); ++_iter44)
    {
      xfer += oprot->writeString((*_iter44));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendUniversities_year", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->friendUniversities_year.size()));
    std::vector<int32_t> ::const_iterator _iter45;
    for (_iter45 = this->friendUniversities_year.begin(); _iter45 != this->friendUniversities_year.end(); ++_iter45)
    {
      xfer += oprot->writeI32((*_iter45));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendUniversities_city", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->friendUniversities_city.size()));
    std::vector<std::string> ::const_iterator _iter46;
    for (_iter46 = this->friendUniversities_city.begin(); _iter46 != this->friendUniversities_city.end(); ++_iter46)
    {
      xfer += oprot->writeString((*_iter46));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendCompanies_name", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->friendCompanies_name.size()));
    std::vector<std::string> ::const_iterator _iter47;
    for (_iter47 = this->friendCompanies_name.begin(); _iter47 != this->friendCompanies_name.end(); ++_iter47)
    {
      xfer += oprot->writeString((*_iter47));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendCompanies_year", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->friendCompanies_year.size()));
    std::vector<int32_t> ::const_iterator _iter48;
    for (_iter48 = this->friendCompanies_year.begin(); _iter48 != this->friendCompanies_year.end(); ++_iter48)
    {
      xfer += oprot->writeI32((*_iter48));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendCompanies_city", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->friendCompanies_city.size()));
    std::vector<std::string> ::const_iterator _iter49;
    for (_iter49 = this->friendCompanies_city.begin(); _iter49 != this->friendCompanies_city.end(); ++_iter49)
    {
      xfer += oprot->writeString((*_iter49));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query1Response &a, Query1Response &b) {
  using ::std::swap;
  swap(a.friendId, b.friendId);
  swap(a.friendLastName, b.friendLastName);
  swap(a.distanceFromPerson, b.distanceFromPerson);
  swap(a.friendBirthday, b.friendBirthday);
  swap(a.friendCreationDate, b.friendCreationDate);
  swap(a.friendGender, b.friendGender);
  swap(a.friendBrowserUsed, b.friendBrowserUsed);
  swap(a.friendLocationIp, b.friendLocationIp);
  swap(a.friendEmails, b.friendEmails);
  swap(a.friendLanguages, b.friendLanguages);
  swap(a.friendCityName, b.friendCityName);
  swap(a.friendUniversities_name, b.friendUniversities_name);
  swap(a.friendUniversities_year, b.friendUniversities_year);
  swap(a.friendUniversities_city, b.friendUniversities_city);
  swap(a.friendCompanies_name, b.friendCompanies_name);
  swap(a.friendCompanies_year, b.friendCompanies_year);
  swap(a.friendCompanies_city, b.friendCompanies_city);
  swap(a.__isset, b.__isset);
}

Query1Response::Query1Response(const Query1Response& other50) {
  friendId = other50.friendId;
  friendLastName = other50.friendLastName;
  distanceFromPerson = other50.distanceFromPerson;
  friendBirthday = other50.friendBirthday;
  friendCreationDate = other50.friendCreationDate;
  friendGender = other50.friendGender;
  friendBrowserUsed = other50.friendBrowserUsed;
  friendLocationIp = other50.friendLocationIp;
  friendEmails = other50.friendEmails;
  friendLanguages = other50.friendLanguages;
  friendCityName = other50.friendCityName;
  friendUniversities_name = other50.friendUniversities_name;
  friendUniversities_year = other50.friendUniversities_year;
  friendUniversities_city = other50.friendUniversities_city;
  friendCompanies_name = other50.friendCompanies_name;
  friendCompanies_year = other50.friendCompanies_year;
  friendCompanies_city = other50.friendCompanies_city;
  __isset = other50.__isset;
}
Query1Response& Query1Response::operator=(const Query1Response& other51) {
  friendId = other51.friendId;
  friendLastName = other51.friendLastName;
  distanceFromPerson = other51.distanceFromPerson;
  friendBirthday = other51.friendBirthday;
  friendCreationDate = other51.friendCreationDate;
  friendGender = other51.friendGender;
  friendBrowserUsed = other51.friendBrowserUsed;
  friendLocationIp = other51.friendLocationIp;
  friendEmails = other51.friendEmails;
  friendLanguages = other51.friendLanguages;
  friendCityName = other51.friendCityName;
  friendUniversities_name = other51.friendUniversities_name;
  friendUniversities_year = other51.friendUniversities_year;
  friendUniversities_city = other51.friendUniversities_city;
  friendCompanies_name = other51.friendCompanies_name;
  friendCompanies_year = other51.friendCompanies_year;
  friendCompanies_city = other51.friendCompanies_city;
  __isset = other51.__isset;
  return *this;
}
void Query1Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query1Response(";
  out << "friendId=" << to_string(friendId);
  out << ", " << "friendLastName=" << to_string(friendLastName);
  out << ", " << "distanceFromPerson=" << to_string(distanceFromPerson);
  out << ", " << "friendBirthday=" << to_string(friendBirthday);
  out << ", " << "friendCreationDate=" << to_string(friendCreationDate);
  out << ", " << "friendGender=" << to_string(friendGender);
  out << ", " << "friendBrowserUsed=" << to_string(friendBrowserUsed);
  out << ", " << "friendLocationIp=" << to_string(friendLocationIp);
  out << ", " << "friendEmails=" << to_string(friendEmails);
  out << ", " << "friendLanguages=" << to_string(friendLanguages);
  out << ", " << "friendCityName=" << to_string(friendCityName);
  out << ", " << "friendUniversities_name=" << to_string(friendUniversities_name);
  out << ", " << "friendUniversities_year=" << to_string(friendUniversities_year);
  out << ", " << "friendUniversities_city=" << to_string(friendUniversities_city);
  out << ", " << "friendCompanies_name=" << to_string(friendCompanies_name);
  out << ", " << "friendCompanies_year=" << to_string(friendCompanies_year);
  out << ", " << "friendCompanies_city=" << to_string(friendCompanies_city);
  out << ")";
}


Query2Request::~Query2Request() noexcept {
}


void Query2Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query2Request::__set_maxDate(const int64_t val) {
  this->maxDate = val;
}

void Query2Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query2Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query2Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxDate);
          this->__isset.maxDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query2Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query2Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxDate", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->maxDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query2Request &a, Query2Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.maxDate, b.maxDate);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query2Request::Query2Request(const Query2Request& other52) noexcept {
  personId = other52.personId;
  maxDate = other52.maxDate;
  limit = other52.limit;
  __isset = other52.__isset;
}
Query2Request& Query2Request::operator=(const Query2Request& other53) noexcept {
  personId = other53.personId;
  maxDate = other53.maxDate;
  limit = other53.limit;
  __isset = other53.__isset;
  return *this;
}
void Query2Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query2Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "maxDate=" << to_string(maxDate);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query2Response::~Query2Response() noexcept {
}


void Query2Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query2Response::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Query2Response::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Query2Response::__set_messageId(const int64_t val) {
  this->messageId = val;
}

void Query2Response::__set_messageContent(const std::string& val) {
  this->messageContent = val;
}

void Query2Response::__set_messageCreationDate(const int64_t val) {
  this->messageCreationDate = val;
}
std::ostream& operator<<(std::ostream& out, const Query2Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query2Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageContent);
          this->__isset.messageContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageCreationDate);
          this->__isset.messageCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query2Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query2Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageContent", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->messageContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageCreationDate", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->messageCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query2Response &a, Query2Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.messageId, b.messageId);
  swap(a.messageContent, b.messageContent);
  swap(a.messageCreationDate, b.messageCreationDate);
  swap(a.__isset, b.__isset);
}

Query2Response::Query2Response(const Query2Response& other54) {
  personId = other54.personId;
  personFirstName = other54.personFirstName;
  personLastName = other54.personLastName;
  messageId = other54.messageId;
  messageContent = other54.messageContent;
  messageCreationDate = other54.messageCreationDate;
  __isset = other54.__isset;
}
Query2Response& Query2Response::operator=(const Query2Response& other55) {
  personId = other55.personId;
  personFirstName = other55.personFirstName;
  personLastName = other55.personLastName;
  messageId = other55.messageId;
  messageContent = other55.messageContent;
  messageCreationDate = other55.messageCreationDate;
  __isset = other55.__isset;
  return *this;
}
void Query2Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query2Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "messageContent=" << to_string(messageContent);
  out << ", " << "messageCreationDate=" << to_string(messageCreationDate);
  out << ")";
}


Query3Request::~Query3Request() noexcept {
}


void Query3Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query3Request::__set_countryXName(const std::string& val) {
  this->countryXName = val;
}

void Query3Request::__set_countryYName(const std::string& val) {
  this->countryYName = val;
}

void Query3Request::__set_startDate(const int64_t val) {
  this->startDate = val;
}

void Query3Request::__set_durationDays(const int32_t val) {
  this->durationDays = val;
}

void Query3Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query3Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query3Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryXName);
          this->__isset.countryXName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryYName);
          this->__isset.countryYName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startDate);
          this->__isset.startDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->durationDays);
          this->__isset.durationDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query3Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query3Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countryXName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->countryXName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countryYName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->countryYName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startDate", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->startDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("durationDays", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->durationDays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query3Request &a, Query3Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.countryXName, b.countryXName);
  swap(a.countryYName, b.countryYName);
  swap(a.startDate, b.startDate);
  swap(a.durationDays, b.durationDays);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query3Request::Query3Request(const Query3Request& other56) {
  personId = other56.personId;
  countryXName = other56.countryXName;
  countryYName = other56.countryYName;
  startDate = other56.startDate;
  durationDays = other56.durationDays;
  limit = other56.limit;
  __isset = other56.__isset;
}
Query3Request& Query3Request::operator=(const Query3Request& other57) {
  personId = other57.personId;
  countryXName = other57.countryXName;
  countryYName = other57.countryYName;
  startDate = other57.startDate;
  durationDays = other57.durationDays;
  limit = other57.limit;
  __isset = other57.__isset;
  return *this;
}
void Query3Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query3Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "countryXName=" << to_string(countryXName);
  out << ", " << "countryYName=" << to_string(countryYName);
  out << ", " << "startDate=" << to_string(startDate);
  out << ", " << "durationDays=" << to_string(durationDays);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query3Response::~Query3Response() noexcept {
}


void Query3Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query3Response::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Query3Response::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Query3Response::__set_xCount(const int32_t val) {
  this->xCount = val;
}

void Query3Response::__set_yCount(const int32_t val) {
  this->yCount = val;
}

void Query3Response::__set_count(const int32_t val) {
  this->count = val;
}
std::ostream& operator<<(std::ostream& out, const Query3Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query3Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xCount);
          this->__isset.xCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->yCount);
          this->__isset.yCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query3Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query3Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->xCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yCount", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->yCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query3Response &a, Query3Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.xCount, b.xCount);
  swap(a.yCount, b.yCount);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

Query3Response::Query3Response(const Query3Response& other58) {
  personId = other58.personId;
  personFirstName = other58.personFirstName;
  personLastName = other58.personLastName;
  xCount = other58.xCount;
  yCount = other58.yCount;
  count = other58.count;
  __isset = other58.__isset;
}
Query3Response& Query3Response::operator=(const Query3Response& other59) {
  personId = other59.personId;
  personFirstName = other59.personFirstName;
  personLastName = other59.personLastName;
  xCount = other59.xCount;
  yCount = other59.yCount;
  count = other59.count;
  __isset = other59.__isset;
  return *this;
}
void Query3Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query3Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "xCount=" << to_string(xCount);
  out << ", " << "yCount=" << to_string(yCount);
  out << ", " << "count=" << to_string(count);
  out << ")";
}


Query4Request::~Query4Request() noexcept {
}


void Query4Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query4Request::__set_startDate(const int64_t val) {
  this->startDate = val;
}

void Query4Request::__set_durationDays(const int32_t val) {
  this->durationDays = val;
}

void Query4Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query4Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query4Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startDate);
          this->__isset.startDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->durationDays);
          this->__isset.durationDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query4Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query4Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startDate", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->startDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("durationDays", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->durationDays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query4Request &a, Query4Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.startDate, b.startDate);
  swap(a.durationDays, b.durationDays);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query4Request::Query4Request(const Query4Request& other60) noexcept {
  personId = other60.personId;
  startDate = other60.startDate;
  durationDays = other60.durationDays;
  limit = other60.limit;
  __isset = other60.__isset;
}
Query4Request& Query4Request::operator=(const Query4Request& other61) noexcept {
  personId = other61.personId;
  startDate = other61.startDate;
  durationDays = other61.durationDays;
  limit = other61.limit;
  __isset = other61.__isset;
  return *this;
}
void Query4Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query4Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "startDate=" << to_string(startDate);
  out << ", " << "durationDays=" << to_string(durationDays);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query4Response::~Query4Response() noexcept {
}


void Query4Response::__set_tagName(const std::string& val) {
  this->tagName = val;
}

void Query4Response::__set_postCount(const int32_t val) {
  this->postCount = val;
}
std::ostream& operator<<(std::ostream& out, const Query4Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query4Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->postCount);
          this->__isset.postCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query4Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query4Response");

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("postCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->postCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query4Response &a, Query4Response &b) {
  using ::std::swap;
  swap(a.tagName, b.tagName);
  swap(a.postCount, b.postCount);
  swap(a.__isset, b.__isset);
}

Query4Response::Query4Response(const Query4Response& other62) {
  tagName = other62.tagName;
  postCount = other62.postCount;
  __isset = other62.__isset;
}
Query4Response& Query4Response::operator=(const Query4Response& other63) {
  tagName = other63.tagName;
  postCount = other63.postCount;
  __isset = other63.__isset;
  return *this;
}
void Query4Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query4Response(";
  out << "tagName=" << to_string(tagName);
  out << ", " << "postCount=" << to_string(postCount);
  out << ")";
}


Query5Request::~Query5Request() noexcept {
}


void Query5Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query5Request::__set_minDate(const int64_t val) {
  this->minDate = val;
}

void Query5Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query5Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query5Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->minDate);
          this->__isset.minDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query5Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query5Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minDate", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->minDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query5Request &a, Query5Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.minDate, b.minDate);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query5Request::Query5Request(const Query5Request& other64) noexcept {
  personId = other64.personId;
  minDate = other64.minDate;
  limit = other64.limit;
  __isset = other64.__isset;
}
Query5Request& Query5Request::operator=(const Query5Request& other65) noexcept {
  personId = other65.personId;
  minDate = other65.minDate;
  limit = other65.limit;
  __isset = other65.__isset;
  return *this;
}
void Query5Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query5Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "minDate=" << to_string(minDate);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query5Response::~Query5Response() noexcept {
}


void Query5Response::__set_forumTitle(const std::string& val) {
  this->forumTitle = val;
}

void Query5Response::__set_postCount(const int32_t val) {
  this->postCount = val;
}
std::ostream& operator<<(std::ostream& out, const Query5Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query5Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->forumTitle);
          this->__isset.forumTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->postCount);
          this->__isset.postCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query5Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query5Response");

  xfer += oprot->writeFieldBegin("forumTitle", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->forumTitle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("postCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->postCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query5Response &a, Query5Response &b) {
  using ::std::swap;
  swap(a.forumTitle, b.forumTitle);
  swap(a.postCount, b.postCount);
  swap(a.__isset, b.__isset);
}

Query5Response::Query5Response(const Query5Response& other66) {
  forumTitle = other66.forumTitle;
  postCount = other66.postCount;
  __isset = other66.__isset;
}
Query5Response& Query5Response::operator=(const Query5Response& other67) {
  forumTitle = other67.forumTitle;
  postCount = other67.postCount;
  __isset = other67.__isset;
  return *this;
}
void Query5Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query5Response(";
  out << "forumTitle=" << to_string(forumTitle);
  out << ", " << "postCount=" << to_string(postCount);
  out << ")";
}


Query6Request::~Query6Request() noexcept {
}


void Query6Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query6Request::__set_tagName(const std::string& val) {
  this->tagName = val;
}

void Query6Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query6Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query6Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query6Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query6Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query6Request &a, Query6Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.tagName, b.tagName);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query6Request::Query6Request(const Query6Request& other68) {
  personId = other68.personId;
  tagName = other68.tagName;
  limit = other68.limit;
  __isset = other68.__isset;
}
Query6Request& Query6Request::operator=(const Query6Request& other69) {
  personId = other69.personId;
  tagName = other69.tagName;
  limit = other69.limit;
  __isset = other69.__isset;
  return *this;
}
void Query6Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query6Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "tagName=" << to_string(tagName);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query6Response::~Query6Response() noexcept {
}


void Query6Response::__set_tagName(const std::string& val) {
  this->tagName = val;
}

void Query6Response::__set_postCount(const int32_t val) {
  this->postCount = val;
}
std::ostream& operator<<(std::ostream& out, const Query6Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query6Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->postCount);
          this->__isset.postCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query6Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query6Response");

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("postCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->postCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query6Response &a, Query6Response &b) {
  using ::std::swap;
  swap(a.tagName, b.tagName);
  swap(a.postCount, b.postCount);
  swap(a.__isset, b.__isset);
}

Query6Response::Query6Response(const Query6Response& other70) {
  tagName = other70.tagName;
  postCount = other70.postCount;
  __isset = other70.__isset;
}
Query6Response& Query6Response::operator=(const Query6Response& other71) {
  tagName = other71.tagName;
  postCount = other71.postCount;
  __isset = other71.__isset;
  return *this;
}
void Query6Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query6Response(";
  out << "tagName=" << to_string(tagName);
  out << ", " << "postCount=" << to_string(postCount);
  out << ")";
}


Query7Request::~Query7Request() noexcept {
}


void Query7Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query7Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query7Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query7Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query7Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query7Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query7Request &a, Query7Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query7Request::Query7Request(const Query7Request& other72) noexcept {
  personId = other72.personId;
  limit = other72.limit;
  __isset = other72.__isset;
}
Query7Request& Query7Request::operator=(const Query7Request& other73) noexcept {
  personId = other73.personId;
  limit = other73.limit;
  __isset = other73.__isset;
  return *this;
}
void Query7Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query7Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query7Response::~Query7Response() noexcept {
}


void Query7Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query7Response::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Query7Response::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Query7Response::__set_likeCreationDate(const int64_t val) {
  this->likeCreationDate = val;
}

void Query7Response::__set_commentOrPostId(const int64_t val) {
  this->commentOrPostId = val;
}

void Query7Response::__set_commentOrPostContent(const std::string& val) {
  this->commentOrPostContent = val;
}

void Query7Response::__set_minutesLatency(const int32_t val) {
  this->minutesLatency = val;
}

void Query7Response::__set_isNew(const bool val) {
  this->isNew = val;
}
std::ostream& operator<<(std::ostream& out, const Query7Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query7Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->likeCreationDate);
          this->__isset.likeCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentOrPostId);
          this->__isset.commentOrPostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commentOrPostContent);
          this->__isset.commentOrPostContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minutesLatency);
          this->__isset.minutesLatency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isNew);
          this->__isset.isNew = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query7Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query7Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("likeCreationDate", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->likeCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentOrPostId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->commentOrPostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentOrPostContent", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->commentOrPostContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minutesLatency", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->minutesLatency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isNew", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->isNew);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query7Response &a, Query7Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.likeCreationDate, b.likeCreationDate);
  swap(a.commentOrPostId, b.commentOrPostId);
  swap(a.commentOrPostContent, b.commentOrPostContent);
  swap(a.minutesLatency, b.minutesLatency);
  swap(a.isNew, b.isNew);
  swap(a.__isset, b.__isset);
}

Query7Response::Query7Response(const Query7Response& other74) {
  personId = other74.personId;
  personFirstName = other74.personFirstName;
  personLastName = other74.personLastName;
  likeCreationDate = other74.likeCreationDate;
  commentOrPostId = other74.commentOrPostId;
  commentOrPostContent = other74.commentOrPostContent;
  minutesLatency = other74.minutesLatency;
  isNew = other74.isNew;
  __isset = other74.__isset;
}
Query7Response& Query7Response::operator=(const Query7Response& other75) {
  personId = other75.personId;
  personFirstName = other75.personFirstName;
  personLastName = other75.personLastName;
  likeCreationDate = other75.likeCreationDate;
  commentOrPostId = other75.commentOrPostId;
  commentOrPostContent = other75.commentOrPostContent;
  minutesLatency = other75.minutesLatency;
  isNew = other75.isNew;
  __isset = other75.__isset;
  return *this;
}
void Query7Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query7Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "likeCreationDate=" << to_string(likeCreationDate);
  out << ", " << "commentOrPostId=" << to_string(commentOrPostId);
  out << ", " << "commentOrPostContent=" << to_string(commentOrPostContent);
  out << ", " << "minutesLatency=" << to_string(minutesLatency);
  out << ", " << "isNew=" << to_string(isNew);
  out << ")";
}


Query8Request::~Query8Request() noexcept {
}


void Query8Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query8Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query8Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query8Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query8Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query8Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query8Request &a, Query8Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query8Request::Query8Request(const Query8Request& other76) noexcept {
  personId = other76.personId;
  limit = other76.limit;
  __isset = other76.__isset;
}
Query8Request& Query8Request::operator=(const Query8Request& other77) noexcept {
  personId = other77.personId;
  limit = other77.limit;
  __isset = other77.__isset;
  return *this;
}
void Query8Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query8Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query8Response::~Query8Response() noexcept {
}


void Query8Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query8Response::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Query8Response::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Query8Response::__set_commentCreationDate(const int64_t val) {
  this->commentCreationDate = val;
}

void Query8Response::__set_commentId(const int64_t val) {
  this->commentId = val;
}

void Query8Response::__set_commentContent(const std::string& val) {
  this->commentContent = val;
}
std::ostream& operator<<(std::ostream& out, const Query8Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query8Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentCreationDate);
          this->__isset.commentCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentId);
          this->__isset.commentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commentContent);
          this->__isset.commentContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query8Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query8Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentCreationDate", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->commentCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->commentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentContent", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->commentContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query8Response &a, Query8Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.commentCreationDate, b.commentCreationDate);
  swap(a.commentId, b.commentId);
  swap(a.commentContent, b.commentContent);
  swap(a.__isset, b.__isset);
}

Query8Response::Query8Response(const Query8Response& other78) {
  personId = other78.personId;
  personFirstName = other78.personFirstName;
  personLastName = other78.personLastName;
  commentCreationDate = other78.commentCreationDate;
  commentId = other78.commentId;
  commentContent = other78.commentContent;
  __isset = other78.__isset;
}
Query8Response& Query8Response::operator=(const Query8Response& other79) {
  personId = other79.personId;
  personFirstName = other79.personFirstName;
  personLastName = other79.personLastName;
  commentCreationDate = other79.commentCreationDate;
  commentId = other79.commentId;
  commentContent = other79.commentContent;
  __isset = other79.__isset;
  return *this;
}
void Query8Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query8Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "commentCreationDate=" << to_string(commentCreationDate);
  out << ", " << "commentId=" << to_string(commentId);
  out << ", " << "commentContent=" << to_string(commentContent);
  out << ")";
}


Query9Request::~Query9Request() noexcept {
}


void Query9Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query9Request::__set_maxDate(const int64_t val) {
  this->maxDate = val;
}

void Query9Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query9Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query9Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxDate);
          this->__isset.maxDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query9Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query9Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxDate", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->maxDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query9Request &a, Query9Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.maxDate, b.maxDate);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query9Request::Query9Request(const Query9Request& other80) noexcept {
  personId = other80.personId;
  maxDate = other80.maxDate;
  limit = other80.limit;
  __isset = other80.__isset;
}
Query9Request& Query9Request::operator=(const Query9Request& other81) noexcept {
  personId = other81.personId;
  maxDate = other81.maxDate;
  limit = other81.limit;
  __isset = other81.__isset;
  return *this;
}
void Query9Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query9Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "maxDate=" << to_string(maxDate);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query9Response::~Query9Response() noexcept {
}


void Query9Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query9Response::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Query9Response::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Query9Response::__set_messageId(const int64_t val) {
  this->messageId = val;
}

void Query9Response::__set_messageContent(const std::string& val) {
  this->messageContent = val;
}

void Query9Response::__set_messageCreationDate(const int64_t val) {
  this->messageCreationDate = val;
}
std::ostream& operator<<(std::ostream& out, const Query9Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query9Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageContent);
          this->__isset.messageContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageCreationDate);
          this->__isset.messageCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query9Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query9Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageContent", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->messageContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageCreationDate", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->messageCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query9Response &a, Query9Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.messageId, b.messageId);
  swap(a.messageContent, b.messageContent);
  swap(a.messageCreationDate, b.messageCreationDate);
  swap(a.__isset, b.__isset);
}

Query9Response::Query9Response(const Query9Response& other82) {
  personId = other82.personId;
  personFirstName = other82.personFirstName;
  personLastName = other82.personLastName;
  messageId = other82.messageId;
  messageContent = other82.messageContent;
  messageCreationDate = other82.messageCreationDate;
  __isset = other82.__isset;
}
Query9Response& Query9Response::operator=(const Query9Response& other83) {
  personId = other83.personId;
  personFirstName = other83.personFirstName;
  personLastName = other83.personLastName;
  messageId = other83.messageId;
  messageContent = other83.messageContent;
  messageCreationDate = other83.messageCreationDate;
  __isset = other83.__isset;
  return *this;
}
void Query9Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query9Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "messageContent=" << to_string(messageContent);
  out << ", " << "messageCreationDate=" << to_string(messageCreationDate);
  out << ")";
}


Query10Request::~Query10Request() noexcept {
}


void Query10Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query10Request::__set_month(const int32_t val) {
  this->month = val;
}

void Query10Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query10Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query10Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->month);
          this->__isset.month = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query10Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query10Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("month", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->month);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query10Request &a, Query10Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.month, b.month);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query10Request::Query10Request(const Query10Request& other84) noexcept {
  personId = other84.personId;
  month = other84.month;
  limit = other84.limit;
  __isset = other84.__isset;
}
Query10Request& Query10Request::operator=(const Query10Request& other85) noexcept {
  personId = other85.personId;
  month = other85.month;
  limit = other85.limit;
  __isset = other85.__isset;
  return *this;
}
void Query10Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query10Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "month=" << to_string(month);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query10Response::~Query10Response() noexcept {
}


void Query10Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query10Response::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Query10Response::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Query10Response::__set_commonInterestSore(const int32_t val) {
  this->commonInterestSore = val;
}

void Query10Response::__set_personGender(const std::string& val) {
  this->personGender = val;
}

void Query10Response::__set_personCityName(const std::string& val) {
  this->personCityName = val;
}
std::ostream& operator<<(std::ostream& out, const Query10Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query10Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->commonInterestSore);
          this->__isset.commonInterestSore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personGender);
          this->__isset.personGender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personCityName);
          this->__isset.personCityName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query10Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query10Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commonInterestSore", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->commonInterestSore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personGender", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->personGender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personCityName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->personCityName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query10Response &a, Query10Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.commonInterestSore, b.commonInterestSore);
  swap(a.personGender, b.personGender);
  swap(a.personCityName, b.personCityName);
  swap(a.__isset, b.__isset);
}

Query10Response::Query10Response(const Query10Response& other86) {
  personId = other86.personId;
  personFirstName = other86.personFirstName;
  personLastName = other86.personLastName;
  commonInterestSore = other86.commonInterestSore;
  personGender = other86.personGender;
  personCityName = other86.personCityName;
  __isset = other86.__isset;
}
Query10Response& Query10Response::operator=(const Query10Response& other87) {
  personId = other87.personId;
  personFirstName = other87.personFirstName;
  personLastName = other87.personLastName;
  commonInterestSore = other87.commonInterestSore;
  personGender = other87.personGender;
  personCityName = other87.personCityName;
  __isset = other87.__isset;
  return *this;
}
void Query10Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query10Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "commonInterestSore=" << to_string(commonInterestSore);
  out << ", " << "personGender=" << to_string(personGender);
  out << ", " << "personCityName=" << to_string(personCityName);
  out << ")";
}


Query11Request::~Query11Request() noexcept {
}


void Query11Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query11Request::__set_countryName(const std::string& val) {
  this->countryName = val;
}

void Query11Request::__set_workFromYear(const int32_t val) {
  this->workFromYear = val;
}

void Query11Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query11Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query11Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryName);
          this->__isset.countryName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->workFromYear);
          this->__isset.workFromYear = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query11Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query11Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countryName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->countryName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("workFromYear", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->workFromYear);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query11Request &a, Query11Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.countryName, b.countryName);
  swap(a.workFromYear, b.workFromYear);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query11Request::Query11Request(const Query11Request& other88) {
  personId = other88.personId;
  countryName = other88.countryName;
  workFromYear = other88.workFromYear;
  limit = other88.limit;
  __isset = other88.__isset;
}
Query11Request& Query11Request::operator=(const Query11Request& other89) {
  personId = other89.personId;
  countryName = other89.countryName;
  workFromYear = other89.workFromYear;
  limit = other89.limit;
  __isset = other89.__isset;
  return *this;
}
void Query11Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query11Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "countryName=" << to_string(countryName);
  out << ", " << "workFromYear=" << to_string(workFromYear);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query11Response::~Query11Response() noexcept {
}


void Query11Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query11Response::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Query11Response::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Query11Response::__set_organizationName(const std::string& val) {
  this->organizationName = val;
}

void Query11Response::__set_organizationWorkFromYear(const int32_t val) {
  this->organizationWorkFromYear = val;
}
std::ostream& operator<<(std::ostream& out, const Query11Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query11Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationName);
          this->__isset.organizationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->organizationWorkFromYear);
          this->__isset.organizationWorkFromYear = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query11Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query11Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->organizationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationWorkFromYear", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->organizationWorkFromYear);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query11Response &a, Query11Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.organizationName, b.organizationName);
  swap(a.organizationWorkFromYear, b.organizationWorkFromYear);
  swap(a.__isset, b.__isset);
}

Query11Response::Query11Response(const Query11Response& other90) {
  personId = other90.personId;
  personFirstName = other90.personFirstName;
  personLastName = other90.personLastName;
  organizationName = other90.organizationName;
  organizationWorkFromYear = other90.organizationWorkFromYear;
  __isset = other90.__isset;
}
Query11Response& Query11Response::operator=(const Query11Response& other91) {
  personId = other91.personId;
  personFirstName = other91.personFirstName;
  personLastName = other91.personLastName;
  organizationName = other91.organizationName;
  organizationWorkFromYear = other91.organizationWorkFromYear;
  __isset = other91.__isset;
  return *this;
}
void Query11Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query11Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "organizationName=" << to_string(organizationName);
  out << ", " << "organizationWorkFromYear=" << to_string(organizationWorkFromYear);
  out << ")";
}


Query12Request::~Query12Request() noexcept {
}


void Query12Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query12Request::__set_tagClassName(const std::string& val) {
  this->tagClassName = val;
}

void Query12Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const Query12Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query12Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagClassName);
          this->__isset.tagClassName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query12Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query12Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagClassName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tagClassName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query12Request &a, Query12Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.tagClassName, b.tagClassName);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

Query12Request::Query12Request(const Query12Request& other92) {
  personId = other92.personId;
  tagClassName = other92.tagClassName;
  limit = other92.limit;
  __isset = other92.__isset;
}
Query12Request& Query12Request::operator=(const Query12Request& other93) {
  personId = other93.personId;
  tagClassName = other93.tagClassName;
  limit = other93.limit;
  __isset = other93.__isset;
  return *this;
}
void Query12Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query12Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "tagClassName=" << to_string(tagClassName);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


Query12Response::~Query12Response() noexcept {
}


void Query12Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void Query12Response::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Query12Response::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Query12Response::__set_tagNames(const std::vector<std::string> & val) {
  this->tagNames = val;
}

void Query12Response::__set_replyCount(const int32_t val) {
  this->replyCount = val;
}
std::ostream& operator<<(std::ostream& out, const Query12Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query12Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagNames.clear();
            uint32_t _size94;
            ::apache::thrift::protocol::TType _etype97;
            xfer += iprot->readListBegin(_etype97, _size94);
            this->tagNames.resize(_size94);
            uint32_t _i98;
            for (_i98 = 0; _i98 < _size94; ++_i98)
            {
              xfer += iprot->readString(this->tagNames[_i98]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->replyCount);
          this->__isset.replyCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query12Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query12Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagNames", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tagNames.size()));
    std::vector<std::string> ::const_iterator _iter99;
    for (_iter99 = this->tagNames.begin(); _iter99 != this->tagNames.end(); ++_iter99)
    {
      xfer += oprot->writeString((*_iter99));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyCount", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->replyCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query12Response &a, Query12Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.tagNames, b.tagNames);
  swap(a.replyCount, b.replyCount);
  swap(a.__isset, b.__isset);
}

Query12Response::Query12Response(const Query12Response& other100) {
  personId = other100.personId;
  personFirstName = other100.personFirstName;
  personLastName = other100.personLastName;
  tagNames = other100.tagNames;
  replyCount = other100.replyCount;
  __isset = other100.__isset;
}
Query12Response& Query12Response::operator=(const Query12Response& other101) {
  personId = other101.personId;
  personFirstName = other101.personFirstName;
  personLastName = other101.personLastName;
  tagNames = other101.tagNames;
  replyCount = other101.replyCount;
  __isset = other101.__isset;
  return *this;
}
void Query12Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query12Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "tagNames=" << to_string(tagNames);
  out << ", " << "replyCount=" << to_string(replyCount);
  out << ")";
}


Query13Request::~Query13Request() noexcept {
}


void Query13Request::__set_person1Id(const int64_t val) {
  this->person1Id = val;
}

void Query13Request::__set_person2Id(const int64_t val) {
  this->person2Id = val;
}
std::ostream& operator<<(std::ostream& out, const Query13Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query13Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->person1Id);
          this->__isset.person1Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->person2Id);
          this->__isset.person2Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query13Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query13Request");

  xfer += oprot->writeFieldBegin("person1Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->person1Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person2Id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->person2Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query13Request &a, Query13Request &b) {
  using ::std::swap;
  swap(a.person1Id, b.person1Id);
  swap(a.person2Id, b.person2Id);
  swap(a.__isset, b.__isset);
}

Query13Request::Query13Request(const Query13Request& other102) noexcept {
  person1Id = other102.person1Id;
  person2Id = other102.person2Id;
  __isset = other102.__isset;
}
Query13Request& Query13Request::operator=(const Query13Request& other103) noexcept {
  person1Id = other103.person1Id;
  person2Id = other103.person2Id;
  __isset = other103.__isset;
  return *this;
}
void Query13Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query13Request(";
  out << "person1Id=" << to_string(person1Id);
  out << ", " << "person2Id=" << to_string(person2Id);
  out << ")";
}


Query13Response::~Query13Response() noexcept {
}


void Query13Response::__set_shortestPathLength(const int32_t val) {
  this->shortestPathLength = val;
}
std::ostream& operator<<(std::ostream& out, const Query13Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query13Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shortestPathLength);
          this->__isset.shortestPathLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query13Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query13Response");

  xfer += oprot->writeFieldBegin("shortestPathLength", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->shortestPathLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query13Response &a, Query13Response &b) {
  using ::std::swap;
  swap(a.shortestPathLength, b.shortestPathLength);
  swap(a.__isset, b.__isset);
}

Query13Response::Query13Response(const Query13Response& other104) noexcept {
  shortestPathLength = other104.shortestPathLength;
  __isset = other104.__isset;
}
Query13Response& Query13Response::operator=(const Query13Response& other105) noexcept {
  shortestPathLength = other105.shortestPathLength;
  __isset = other105.__isset;
  return *this;
}
void Query13Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query13Response(";
  out << "shortestPathLength=" << to_string(shortestPathLength);
  out << ")";
}


Query14Request::~Query14Request() noexcept {
}


void Query14Request::__set_person1Id(const int64_t val) {
  this->person1Id = val;
}

void Query14Request::__set_person2Id(const int64_t val) {
  this->person2Id = val;
}
std::ostream& operator<<(std::ostream& out, const Query14Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query14Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->person1Id);
          this->__isset.person1Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->person2Id);
          this->__isset.person2Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query14Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query14Request");

  xfer += oprot->writeFieldBegin("person1Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->person1Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person2Id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->person2Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query14Request &a, Query14Request &b) {
  using ::std::swap;
  swap(a.person1Id, b.person1Id);
  swap(a.person2Id, b.person2Id);
  swap(a.__isset, b.__isset);
}

Query14Request::Query14Request(const Query14Request& other106) noexcept {
  person1Id = other106.person1Id;
  person2Id = other106.person2Id;
  __isset = other106.__isset;
}
Query14Request& Query14Request::operator=(const Query14Request& other107) noexcept {
  person1Id = other107.person1Id;
  person2Id = other107.person2Id;
  __isset = other107.__isset;
  return *this;
}
void Query14Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query14Request(";
  out << "person1Id=" << to_string(person1Id);
  out << ", " << "person2Id=" << to_string(person2Id);
  out << ")";
}


Query14Response::~Query14Response() noexcept {
}


void Query14Response::__set_personIdsInPath(const std::vector<int64_t> & val) {
  this->personIdsInPath = val;
}

void Query14Response::__set_pathWeight(const double val) {
  this->pathWeight = val;
}
std::ostream& operator<<(std::ostream& out, const Query14Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query14Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->personIdsInPath.clear();
            uint32_t _size108;
            ::apache::thrift::protocol::TType _etype111;
            xfer += iprot->readListBegin(_etype111, _size108);
            this->personIdsInPath.resize(_size108);
            uint32_t _i112;
            for (_i112 = 0; _i112 < _size108; ++_i112)
            {
              xfer += iprot->readI64(this->personIdsInPath[_i112]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.personIdsInPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pathWeight);
          this->__isset.pathWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query14Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query14Response");

  xfer += oprot->writeFieldBegin("personIdsInPath", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->personIdsInPath.size()));
    std::vector<int64_t> ::const_iterator _iter113;
    for (_iter113 = this->personIdsInPath.begin(); _iter113 != this->personIdsInPath.end(); ++_iter113)
    {
      xfer += oprot->writeI64((*_iter113));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pathWeight", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->pathWeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query14Response &a, Query14Response &b) {
  using ::std::swap;
  swap(a.personIdsInPath, b.personIdsInPath);
  swap(a.pathWeight, b.pathWeight);
  swap(a.__isset, b.__isset);
}

Query14Response::Query14Response(const Query14Response& other114) {
  personIdsInPath = other114.personIdsInPath;
  pathWeight = other114.pathWeight;
  __isset = other114.__isset;
}
Query14Response& Query14Response::operator=(const Query14Response& other115) {
  personIdsInPath = other115.personIdsInPath;
  pathWeight = other115.pathWeight;
  __isset = other115.__isset;
  return *this;
}
void Query14Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query14Response(";
  out << "personIdsInPath=" << to_string(personIdsInPath);
  out << ", " << "pathWeight=" << to_string(pathWeight);
  out << ")";
}


ShortQuery1Request::~ShortQuery1Request() noexcept {
}


void ShortQuery1Request::__set_personId(const int64_t val) {
  this->personId = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery1Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery1Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery1Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery1Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery1Request &a, ShortQuery1Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.__isset, b.__isset);
}

ShortQuery1Request::ShortQuery1Request(const ShortQuery1Request& other116) noexcept {
  personId = other116.personId;
  __isset = other116.__isset;
}
ShortQuery1Request& ShortQuery1Request::operator=(const ShortQuery1Request& other117) noexcept {
  personId = other117.personId;
  __isset = other117.__isset;
  return *this;
}
void ShortQuery1Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery1Request(";
  out << "personId=" << to_string(personId);
  out << ")";
}


ShortQuery1Response::~ShortQuery1Response() noexcept {
}


void ShortQuery1Response::__set_firstName(const std::string& val) {
  this->firstName = val;
}

void ShortQuery1Response::__set_lastName(const std::string& val) {
  this->lastName = val;
}

void ShortQuery1Response::__set_birthday(const int64_t val) {
  this->birthday = val;
}

void ShortQuery1Response::__set_locationIp(const std::string& val) {
  this->locationIp = val;
}

void ShortQuery1Response::__set_browserUsed(const std::string& val) {
  this->browserUsed = val;
}

void ShortQuery1Response::__set_cityId(const int64_t val) {
  this->cityId = val;
}

void ShortQuery1Response::__set_gender(const std::string& val) {
  this->gender = val;
}

void ShortQuery1Response::__set_creationDate(const int64_t val) {
  this->creationDate = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery1Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery1Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          this->__isset.firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          this->__isset.lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birthday);
          this->__isset.birthday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationIp);
          this->__isset.locationIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->browserUsed);
          this->__isset.browserUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityId);
          this->__isset.cityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery1Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery1Response");

  xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->firstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->lastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthday", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->birthday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locationIp", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->locationIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("browserUsed", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->browserUsed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityId", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->cityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery1Response &a, ShortQuery1Response &b) {
  using ::std::swap;
  swap(a.firstName, b.firstName);
  swap(a.lastName, b.lastName);
  swap(a.birthday, b.birthday);
  swap(a.locationIp, b.locationIp);
  swap(a.browserUsed, b.browserUsed);
  swap(a.cityId, b.cityId);
  swap(a.gender, b.gender);
  swap(a.creationDate, b.creationDate);
  swap(a.__isset, b.__isset);
}

ShortQuery1Response::ShortQuery1Response(const ShortQuery1Response& other118) {
  firstName = other118.firstName;
  lastName = other118.lastName;
  birthday = other118.birthday;
  locationIp = other118.locationIp;
  browserUsed = other118.browserUsed;
  cityId = other118.cityId;
  gender = other118.gender;
  creationDate = other118.creationDate;
  __isset = other118.__isset;
}
ShortQuery1Response& ShortQuery1Response::operator=(const ShortQuery1Response& other119) {
  firstName = other119.firstName;
  lastName = other119.lastName;
  birthday = other119.birthday;
  locationIp = other119.locationIp;
  browserUsed = other119.browserUsed;
  cityId = other119.cityId;
  gender = other119.gender;
  creationDate = other119.creationDate;
  __isset = other119.__isset;
  return *this;
}
void ShortQuery1Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery1Response(";
  out << "firstName=" << to_string(firstName);
  out << ", " << "lastName=" << to_string(lastName);
  out << ", " << "birthday=" << to_string(birthday);
  out << ", " << "locationIp=" << to_string(locationIp);
  out << ", " << "browserUsed=" << to_string(browserUsed);
  out << ", " << "cityId=" << to_string(cityId);
  out << ", " << "gender=" << to_string(gender);
  out << ", " << "creationDate=" << to_string(creationDate);
  out << ")";
}


ShortQuery2Request::~ShortQuery2Request() noexcept {
}


void ShortQuery2Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void ShortQuery2Request::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery2Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery2Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery2Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery2Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery2Request &a, ShortQuery2Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

ShortQuery2Request::ShortQuery2Request(const ShortQuery2Request& other120) noexcept {
  personId = other120.personId;
  limit = other120.limit;
  __isset = other120.__isset;
}
ShortQuery2Request& ShortQuery2Request::operator=(const ShortQuery2Request& other121) noexcept {
  personId = other121.personId;
  limit = other121.limit;
  __isset = other121.__isset;
  return *this;
}
void ShortQuery2Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery2Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


ShortQuery2Response::~ShortQuery2Response() noexcept {
}


void ShortQuery2Response::__set_messageId(const int64_t val) {
  this->messageId = val;
}

void ShortQuery2Response::__set_messageContent(const std::string& val) {
  this->messageContent = val;
}

void ShortQuery2Response::__set_messageCreationDate(const int64_t val) {
  this->messageCreationDate = val;
}

void ShortQuery2Response::__set_originalPostId(const int64_t val) {
  this->originalPostId = val;
}

void ShortQuery2Response::__set_originalPostAuthorId(const int64_t val) {
  this->originalPostAuthorId = val;
}

void ShortQuery2Response::__set_originalPostAuthorFirstName(const std::string& val) {
  this->originalPostAuthorFirstName = val;
}

void ShortQuery2Response::__set_originalPostAuthorLastName(const std::string& val) {
  this->originalPostAuthorLastName = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery2Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery2Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageContent);
          this->__isset.messageContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageCreationDate);
          this->__isset.messageCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->originalPostId);
          this->__isset.originalPostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->originalPostAuthorId);
          this->__isset.originalPostAuthorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->originalPostAuthorFirstName);
          this->__isset.originalPostAuthorFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->originalPostAuthorLastName);
          this->__isset.originalPostAuthorLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery2Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery2Response");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageContent", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageCreationDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->messageCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("originalPostId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->originalPostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("originalPostAuthorId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->originalPostAuthorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("originalPostAuthorFirstName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->originalPostAuthorFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("originalPostAuthorLastName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->originalPostAuthorLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery2Response &a, ShortQuery2Response &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.messageContent, b.messageContent);
  swap(a.messageCreationDate, b.messageCreationDate);
  swap(a.originalPostId, b.originalPostId);
  swap(a.originalPostAuthorId, b.originalPostAuthorId);
  swap(a.originalPostAuthorFirstName, b.originalPostAuthorFirstName);
  swap(a.originalPostAuthorLastName, b.originalPostAuthorLastName);
  swap(a.__isset, b.__isset);
}

ShortQuery2Response::ShortQuery2Response(const ShortQuery2Response& other122) {
  messageId = other122.messageId;
  messageContent = other122.messageContent;
  messageCreationDate = other122.messageCreationDate;
  originalPostId = other122.originalPostId;
  originalPostAuthorId = other122.originalPostAuthorId;
  originalPostAuthorFirstName = other122.originalPostAuthorFirstName;
  originalPostAuthorLastName = other122.originalPostAuthorLastName;
  __isset = other122.__isset;
}
ShortQuery2Response& ShortQuery2Response::operator=(const ShortQuery2Response& other123) {
  messageId = other123.messageId;
  messageContent = other123.messageContent;
  messageCreationDate = other123.messageCreationDate;
  originalPostId = other123.originalPostId;
  originalPostAuthorId = other123.originalPostAuthorId;
  originalPostAuthorFirstName = other123.originalPostAuthorFirstName;
  originalPostAuthorLastName = other123.originalPostAuthorLastName;
  __isset = other123.__isset;
  return *this;
}
void ShortQuery2Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery2Response(";
  out << "messageId=" << to_string(messageId);
  out << ", " << "messageContent=" << to_string(messageContent);
  out << ", " << "messageCreationDate=" << to_string(messageCreationDate);
  out << ", " << "originalPostId=" << to_string(originalPostId);
  out << ", " << "originalPostAuthorId=" << to_string(originalPostAuthorId);
  out << ", " << "originalPostAuthorFirstName=" << to_string(originalPostAuthorFirstName);
  out << ", " << "originalPostAuthorLastName=" << to_string(originalPostAuthorLastName);
  out << ")";
}


ShortQuery3Request::~ShortQuery3Request() noexcept {
}


void ShortQuery3Request::__set_personId(const int64_t val) {
  this->personId = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery3Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery3Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery3Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery3Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery3Request &a, ShortQuery3Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.__isset, b.__isset);
}

ShortQuery3Request::ShortQuery3Request(const ShortQuery3Request& other124) noexcept {
  personId = other124.personId;
  __isset = other124.__isset;
}
ShortQuery3Request& ShortQuery3Request::operator=(const ShortQuery3Request& other125) noexcept {
  personId = other125.personId;
  __isset = other125.__isset;
  return *this;
}
void ShortQuery3Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery3Request(";
  out << "personId=" << to_string(personId);
  out << ")";
}


ShortQuery3Response::~ShortQuery3Response() noexcept {
}


void ShortQuery3Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void ShortQuery3Response::__set_firstName(const std::string& val) {
  this->firstName = val;
}

void ShortQuery3Response::__set_lastName(const std::string& val) {
  this->lastName = val;
}

void ShortQuery3Response::__set_friendshipCreationDate(const int64_t val) {
  this->friendshipCreationDate = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery3Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery3Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          this->__isset.firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          this->__isset.lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->friendshipCreationDate);
          this->__isset.friendshipCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery3Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery3Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->firstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->lastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendshipCreationDate", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->friendshipCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery3Response &a, ShortQuery3Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.firstName, b.firstName);
  swap(a.lastName, b.lastName);
  swap(a.friendshipCreationDate, b.friendshipCreationDate);
  swap(a.__isset, b.__isset);
}

ShortQuery3Response::ShortQuery3Response(const ShortQuery3Response& other126) {
  personId = other126.personId;
  firstName = other126.firstName;
  lastName = other126.lastName;
  friendshipCreationDate = other126.friendshipCreationDate;
  __isset = other126.__isset;
}
ShortQuery3Response& ShortQuery3Response::operator=(const ShortQuery3Response& other127) {
  personId = other127.personId;
  firstName = other127.firstName;
  lastName = other127.lastName;
  friendshipCreationDate = other127.friendshipCreationDate;
  __isset = other127.__isset;
  return *this;
}
void ShortQuery3Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery3Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "firstName=" << to_string(firstName);
  out << ", " << "lastName=" << to_string(lastName);
  out << ", " << "friendshipCreationDate=" << to_string(friendshipCreationDate);
  out << ")";
}


ShortQuery4Request::~ShortQuery4Request() noexcept {
}


void ShortQuery4Request::__set_messageId(const int64_t val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery4Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery4Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery4Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery4Request");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery4Request &a, ShortQuery4Request &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

ShortQuery4Request::ShortQuery4Request(const ShortQuery4Request& other128) noexcept {
  messageId = other128.messageId;
  __isset = other128.__isset;
}
ShortQuery4Request& ShortQuery4Request::operator=(const ShortQuery4Request& other129) noexcept {
  messageId = other129.messageId;
  __isset = other129.__isset;
  return *this;
}
void ShortQuery4Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery4Request(";
  out << "messageId=" << to_string(messageId);
  out << ")";
}


ShortQuery4Response::~ShortQuery4Response() noexcept {
}


void ShortQuery4Response::__set_messageCreationDate(const int64_t val) {
  this->messageCreationDate = val;
}

void ShortQuery4Response::__set_messageContent(const std::string& val) {
  this->messageContent = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery4Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery4Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageCreationDate);
          this->__isset.messageCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageContent);
          this->__isset.messageContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery4Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery4Response");

  xfer += oprot->writeFieldBegin("messageCreationDate", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->messageCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageContent", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery4Response &a, ShortQuery4Response &b) {
  using ::std::swap;
  swap(a.messageCreationDate, b.messageCreationDate);
  swap(a.messageContent, b.messageContent);
  swap(a.__isset, b.__isset);
}

ShortQuery4Response::ShortQuery4Response(const ShortQuery4Response& other130) {
  messageCreationDate = other130.messageCreationDate;
  messageContent = other130.messageContent;
  __isset = other130.__isset;
}
ShortQuery4Response& ShortQuery4Response::operator=(const ShortQuery4Response& other131) {
  messageCreationDate = other131.messageCreationDate;
  messageContent = other131.messageContent;
  __isset = other131.__isset;
  return *this;
}
void ShortQuery4Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery4Response(";
  out << "messageCreationDate=" << to_string(messageCreationDate);
  out << ", " << "messageContent=" << to_string(messageContent);
  out << ")";
}


ShortQuery5Request::~ShortQuery5Request() noexcept {
}


void ShortQuery5Request::__set_messageId(const int64_t val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery5Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery5Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery5Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery5Request");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery5Request &a, ShortQuery5Request &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

ShortQuery5Request::ShortQuery5Request(const ShortQuery5Request& other132) noexcept {
  messageId = other132.messageId;
  __isset = other132.__isset;
}
ShortQuery5Request& ShortQuery5Request::operator=(const ShortQuery5Request& other133) noexcept {
  messageId = other133.messageId;
  __isset = other133.__isset;
  return *this;
}
void ShortQuery5Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery5Request(";
  out << "messageId=" << to_string(messageId);
  out << ")";
}


ShortQuery5Response::~ShortQuery5Response() noexcept {
}


void ShortQuery5Response::__set_personId(const int64_t val) {
  this->personId = val;
}

void ShortQuery5Response::__set_firstName(const std::string& val) {
  this->firstName = val;
}

void ShortQuery5Response::__set_lastName(const std::string& val) {
  this->lastName = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery5Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery5Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          this->__isset.firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          this->__isset.lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery5Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery5Response");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->firstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->lastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery5Response &a, ShortQuery5Response &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.firstName, b.firstName);
  swap(a.lastName, b.lastName);
  swap(a.__isset, b.__isset);
}

ShortQuery5Response::ShortQuery5Response(const ShortQuery5Response& other134) {
  personId = other134.personId;
  firstName = other134.firstName;
  lastName = other134.lastName;
  __isset = other134.__isset;
}
ShortQuery5Response& ShortQuery5Response::operator=(const ShortQuery5Response& other135) {
  personId = other135.personId;
  firstName = other135.firstName;
  lastName = other135.lastName;
  __isset = other135.__isset;
  return *this;
}
void ShortQuery5Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery5Response(";
  out << "personId=" << to_string(personId);
  out << ", " << "firstName=" << to_string(firstName);
  out << ", " << "lastName=" << to_string(lastName);
  out << ")";
}


ShortQuery6Request::~ShortQuery6Request() noexcept {
}


void ShortQuery6Request::__set_messageId(const int64_t val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery6Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery6Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery6Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery6Request");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery6Request &a, ShortQuery6Request &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

ShortQuery6Request::ShortQuery6Request(const ShortQuery6Request& other136) noexcept {
  messageId = other136.messageId;
  __isset = other136.__isset;
}
ShortQuery6Request& ShortQuery6Request::operator=(const ShortQuery6Request& other137) noexcept {
  messageId = other137.messageId;
  __isset = other137.__isset;
  return *this;
}
void ShortQuery6Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery6Request(";
  out << "messageId=" << to_string(messageId);
  out << ")";
}


ShortQuery6Response::~ShortQuery6Response() noexcept {
}


void ShortQuery6Response::__set_forumId(const int64_t val) {
  this->forumId = val;
}

void ShortQuery6Response::__set_forumTitle(const std::string& val) {
  this->forumTitle = val;
}

void ShortQuery6Response::__set_moderatorId(const int64_t val) {
  this->moderatorId = val;
}

void ShortQuery6Response::__set_moderatorFirstName(const std::string& val) {
  this->moderatorFirstName = val;
}

void ShortQuery6Response::__set_moderatorLastName(const std::string& val) {
  this->moderatorLastName = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery6Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery6Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->forumId);
          this->__isset.forumId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->forumTitle);
          this->__isset.forumTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->moderatorId);
          this->__isset.moderatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->moderatorFirstName);
          this->__isset.moderatorFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->moderatorLastName);
          this->__isset.moderatorLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery6Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery6Response");

  xfer += oprot->writeFieldBegin("forumId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->forumId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forumTitle", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->forumTitle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moderatorId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->moderatorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moderatorFirstName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->moderatorFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moderatorLastName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->moderatorLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery6Response &a, ShortQuery6Response &b) {
  using ::std::swap;
  swap(a.forumId, b.forumId);
  swap(a.forumTitle, b.forumTitle);
  swap(a.moderatorId, b.moderatorId);
  swap(a.moderatorFirstName, b.moderatorFirstName);
  swap(a.moderatorLastName, b.moderatorLastName);
  swap(a.__isset, b.__isset);
}

ShortQuery6Response::ShortQuery6Response(const ShortQuery6Response& other138) {
  forumId = other138.forumId;
  forumTitle = other138.forumTitle;
  moderatorId = other138.moderatorId;
  moderatorFirstName = other138.moderatorFirstName;
  moderatorLastName = other138.moderatorLastName;
  __isset = other138.__isset;
}
ShortQuery6Response& ShortQuery6Response::operator=(const ShortQuery6Response& other139) {
  forumId = other139.forumId;
  forumTitle = other139.forumTitle;
  moderatorId = other139.moderatorId;
  moderatorFirstName = other139.moderatorFirstName;
  moderatorLastName = other139.moderatorLastName;
  __isset = other139.__isset;
  return *this;
}
void ShortQuery6Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery6Response(";
  out << "forumId=" << to_string(forumId);
  out << ", " << "forumTitle=" << to_string(forumTitle);
  out << ", " << "moderatorId=" << to_string(moderatorId);
  out << ", " << "moderatorFirstName=" << to_string(moderatorFirstName);
  out << ", " << "moderatorLastName=" << to_string(moderatorLastName);
  out << ")";
}


ShortQuery7Request::~ShortQuery7Request() noexcept {
}


void ShortQuery7Request::__set_messageId(const int64_t val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery7Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery7Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery7Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery7Request");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery7Request &a, ShortQuery7Request &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

ShortQuery7Request::ShortQuery7Request(const ShortQuery7Request& other140) noexcept {
  messageId = other140.messageId;
  __isset = other140.__isset;
}
ShortQuery7Request& ShortQuery7Request::operator=(const ShortQuery7Request& other141) noexcept {
  messageId = other141.messageId;
  __isset = other141.__isset;
  return *this;
}
void ShortQuery7Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery7Request(";
  out << "messageId=" << to_string(messageId);
  out << ")";
}


ShortQuery7Response::~ShortQuery7Response() noexcept {
}


void ShortQuery7Response::__set_commentId(const int64_t val) {
  this->commentId = val;
}

void ShortQuery7Response::__set_commentContent(const std::string& val) {
  this->commentContent = val;
}

void ShortQuery7Response::__set_commentCreationDate(const int64_t val) {
  this->commentCreationDate = val;
}

void ShortQuery7Response::__set_replyAuthorId(const int64_t val) {
  this->replyAuthorId = val;
}

void ShortQuery7Response::__set_replyAuthorFirstName(const std::string& val) {
  this->replyAuthorFirstName = val;
}

void ShortQuery7Response::__set_replyAuthorLastName(const std::string& val) {
  this->replyAuthorLastName = val;
}

void ShortQuery7Response::__set_replyAuthorKnowsOriginalMassageAuthor(const bool val) {
  this->replyAuthorKnowsOriginalMassageAuthor = val;
}
std::ostream& operator<<(std::ostream& out, const ShortQuery7Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortQuery7Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentId);
          this->__isset.commentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commentContent);
          this->__isset.commentContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentCreationDate);
          this->__isset.commentCreationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->replyAuthorId);
          this->__isset.replyAuthorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replyAuthorFirstName);
          this->__isset.replyAuthorFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replyAuthorLastName);
          this->__isset.replyAuthorLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->replyAuthorKnowsOriginalMassageAuthor);
          this->__isset.replyAuthorKnowsOriginalMassageAuthor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortQuery7Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortQuery7Response");

  xfer += oprot->writeFieldBegin("commentId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->commentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentContent", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->commentContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentCreationDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->commentCreationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyAuthorId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->replyAuthorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyAuthorFirstName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->replyAuthorFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyAuthorLastName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->replyAuthorLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyAuthorKnowsOriginalMassageAuthor", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->replyAuthorKnowsOriginalMassageAuthor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortQuery7Response &a, ShortQuery7Response &b) {
  using ::std::swap;
  swap(a.commentId, b.commentId);
  swap(a.commentContent, b.commentContent);
  swap(a.commentCreationDate, b.commentCreationDate);
  swap(a.replyAuthorId, b.replyAuthorId);
  swap(a.replyAuthorFirstName, b.replyAuthorFirstName);
  swap(a.replyAuthorLastName, b.replyAuthorLastName);
  swap(a.replyAuthorKnowsOriginalMassageAuthor, b.replyAuthorKnowsOriginalMassageAuthor);
  swap(a.__isset, b.__isset);
}

ShortQuery7Response::ShortQuery7Response(const ShortQuery7Response& other142) {
  commentId = other142.commentId;
  commentContent = other142.commentContent;
  commentCreationDate = other142.commentCreationDate;
  replyAuthorId = other142.replyAuthorId;
  replyAuthorFirstName = other142.replyAuthorFirstName;
  replyAuthorLastName = other142.replyAuthorLastName;
  replyAuthorKnowsOriginalMassageAuthor = other142.replyAuthorKnowsOriginalMassageAuthor;
  __isset = other142.__isset;
}
ShortQuery7Response& ShortQuery7Response::operator=(const ShortQuery7Response& other143) {
  commentId = other143.commentId;
  commentContent = other143.commentContent;
  commentCreationDate = other143.commentCreationDate;
  replyAuthorId = other143.replyAuthorId;
  replyAuthorFirstName = other143.replyAuthorFirstName;
  replyAuthorLastName = other143.replyAuthorLastName;
  replyAuthorKnowsOriginalMassageAuthor = other143.replyAuthorKnowsOriginalMassageAuthor;
  __isset = other143.__isset;
  return *this;
}
void ShortQuery7Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortQuery7Response(";
  out << "commentId=" << to_string(commentId);
  out << ", " << "commentContent=" << to_string(commentContent);
  out << ", " << "commentCreationDate=" << to_string(commentCreationDate);
  out << ", " << "replyAuthorId=" << to_string(replyAuthorId);
  out << ", " << "replyAuthorFirstName=" << to_string(replyAuthorFirstName);
  out << ", " << "replyAuthorLastName=" << to_string(replyAuthorLastName);
  out << ", " << "replyAuthorKnowsOriginalMassageAuthor=" << to_string(replyAuthorKnowsOriginalMassageAuthor);
  out << ")";
}


Update1Request::~Update1Request() noexcept {
}


void Update1Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Update1Request::__set_personFirstName(const std::string& val) {
  this->personFirstName = val;
}

void Update1Request::__set_personLastName(const std::string& val) {
  this->personLastName = val;
}

void Update1Request::__set_gender(const std::string& val) {
  this->gender = val;
}

void Update1Request::__set_birthday(const int64_t val) {
  this->birthday = val;
}

void Update1Request::__set_creationDate(const int64_t val) {
  this->creationDate = val;
}

void Update1Request::__set_locationIp(const std::string& val) {
  this->locationIp = val;
}

void Update1Request::__set_browserUsed(const std::string& val) {
  this->browserUsed = val;
}

void Update1Request::__set_cityId(const int64_t val) {
  this->cityId = val;
}

void Update1Request::__set_languages(const std::vector<std::string> & val) {
  this->languages = val;
}

void Update1Request::__set_emails(const std::vector<std::string> & val) {
  this->emails = val;
}

void Update1Request::__set_tagIds(const std::vector<int64_t> & val) {
  this->tagIds = val;
}

void Update1Request::__set_studyAt_id(const std::vector<int64_t> & val) {
  this->studyAt_id = val;
}

void Update1Request::__set_studyAt_year(const std::vector<int32_t> & val) {
  this->studyAt_year = val;
}

void Update1Request::__set_workAt_id(const std::vector<int64_t> & val) {
  this->workAt_id = val;
}

void Update1Request::__set_workAt_year(const std::vector<int32_t> & val) {
  this->workAt_year = val;
}
std::ostream& operator<<(std::ostream& out, const Update1Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Update1Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personFirstName);
          this->__isset.personFirstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personLastName);
          this->__isset.personLastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birthday);
          this->__isset.birthday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationIp);
          this->__isset.locationIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->browserUsed);
          this->__isset.browserUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityId);
          this->__isset.cityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->languages.clear();
            uint32_t _size144;
            ::apache::thrift::protocol::TType _etype147;
            xfer += iprot->readListBegin(_etype147, _size144);
            this->languages.resize(_size144);
            uint32_t _i148;
            for (_i148 = 0; _i148 < _size144; ++_i148)
            {
              xfer += iprot->readString(this->languages[_i148]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.languages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->emails.clear();
            uint32_t _size149;
            ::apache::thrift::protocol::TType _etype152;
            xfer += iprot->readListBegin(_etype152, _size149);
            this->emails.resize(_size149);
            uint32_t _i153;
            for (_i153 = 0; _i153 < _size149; ++_i153)
            {
              xfer += iprot->readString(this->emails[_i153]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.emails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagIds.clear();
            uint32_t _size154;
            ::apache::thrift::protocol::TType _etype157;
            xfer += iprot->readListBegin(_etype157, _size154);
            this->tagIds.resize(_size154);
            uint32_t _i158;
            for (_i158 = 0; _i158 < _size154; ++_i158)
            {
              xfer += iprot->readI64(this->tagIds[_i158]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->studyAt_id.clear();
            uint32_t _size159;
            ::apache::thrift::protocol::TType _etype162;
            xfer += iprot->readListBegin(_etype162, _size159);
            this->studyAt_id.resize(_size159);
            uint32_t _i163;
            for (_i163 = 0; _i163 < _size159; ++_i163)
            {
              xfer += iprot->readI64(this->studyAt_id[_i163]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.studyAt_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->studyAt_year.clear();
            uint32_t _size164;
            ::apache::thrift::protocol::TType _etype167;
            xfer += iprot->readListBegin(_etype167, _size164);
            this->studyAt_year.resize(_size164);
            uint32_t _i168;
            for (_i168 = 0; _i168 < _size164; ++_i168)
            {
              xfer += iprot->readI32(this->studyAt_year[_i168]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.studyAt_year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->workAt_id.clear();
            uint32_t _size169;
            ::apache::thrift::protocol::TType _etype172;
            xfer += iprot->readListBegin(_etype172, _size169);
            this->workAt_id.resize(_size169);
            uint32_t _i173;
            for (_i173 = 0; _i173 < _size169; ++_i173)
            {
              xfer += iprot->readI64(this->workAt_id[_i173]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.workAt_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->workAt_year.clear();
            uint32_t _size174;
            ::apache::thrift::protocol::TType _etype177;
            xfer += iprot->readListBegin(_etype177, _size174);
            this->workAt_year.resize(_size174);
            uint32_t _i178;
            for (_i178 = 0; _i178 < _size174; ++_i178)
            {
              xfer += iprot->readI32(this->workAt_year[_i178]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.workAt_year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update1Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Update1Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personFirstName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->personFirstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personLastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->personLastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthday", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->birthday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locationIp", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->locationIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("browserUsed", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->browserUsed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityId", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->cityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languages", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->languages.size()));
    std::vector<std::string> ::const_iterator _iter179;
    for (_iter179 = this->languages.begin(); _iter179 != this->languages.end(); ++_iter179)
    {
      xfer += oprot->writeString((*_iter179));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emails", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->emails.size()));
    std::vector<std::string> ::const_iterator _iter180;
    for (_iter180 = this->emails.begin(); _iter180 != this->emails.end(); ++_iter180)
    {
      xfer += oprot->writeString((*_iter180));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagIds", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->tagIds.size()));
    std::vector<int64_t> ::const_iterator _iter181;
    for (_iter181 = this->tagIds.begin(); _iter181 != this->tagIds.end(); ++_iter181)
    {
      xfer += oprot->writeI64((*_iter181));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("studyAt_id", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->studyAt_id.size()));
    std::vector<int64_t> ::const_iterator _iter182;
    for (_iter182 = this->studyAt_id.begin(); _iter182 != this->studyAt_id.end(); ++_iter182)
    {
      xfer += oprot->writeI64((*_iter182));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("studyAt_year", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->studyAt_year.size()));
    std::vector<int32_t> ::const_iterator _iter183;
    for (_iter183 = this->studyAt_year.begin(); _iter183 != this->studyAt_year.end(); ++_iter183)
    {
      xfer += oprot->writeI32((*_iter183));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("workAt_id", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->workAt_id.size()));
    std::vector<int64_t> ::const_iterator _iter184;
    for (_iter184 = this->workAt_id.begin(); _iter184 != this->workAt_id.end(); ++_iter184)
    {
      xfer += oprot->writeI64((*_iter184));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("workAt_year", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->workAt_year.size()));
    std::vector<int32_t> ::const_iterator _iter185;
    for (_iter185 = this->workAt_year.begin(); _iter185 != this->workAt_year.end(); ++_iter185)
    {
      xfer += oprot->writeI32((*_iter185));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update1Request &a, Update1Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.personFirstName, b.personFirstName);
  swap(a.personLastName, b.personLastName);
  swap(a.gender, b.gender);
  swap(a.birthday, b.birthday);
  swap(a.creationDate, b.creationDate);
  swap(a.locationIp, b.locationIp);
  swap(a.browserUsed, b.browserUsed);
  swap(a.cityId, b.cityId);
  swap(a.languages, b.languages);
  swap(a.emails, b.emails);
  swap(a.tagIds, b.tagIds);
  swap(a.studyAt_id, b.studyAt_id);
  swap(a.studyAt_year, b.studyAt_year);
  swap(a.workAt_id, b.workAt_id);
  swap(a.workAt_year, b.workAt_year);
  swap(a.__isset, b.__isset);
}

Update1Request::Update1Request(const Update1Request& other186) {
  personId = other186.personId;
  personFirstName = other186.personFirstName;
  personLastName = other186.personLastName;
  gender = other186.gender;
  birthday = other186.birthday;
  creationDate = other186.creationDate;
  locationIp = other186.locationIp;
  browserUsed = other186.browserUsed;
  cityId = other186.cityId;
  languages = other186.languages;
  emails = other186.emails;
  tagIds = other186.tagIds;
  studyAt_id = other186.studyAt_id;
  studyAt_year = other186.studyAt_year;
  workAt_id = other186.workAt_id;
  workAt_year = other186.workAt_year;
  __isset = other186.__isset;
}
Update1Request& Update1Request::operator=(const Update1Request& other187) {
  personId = other187.personId;
  personFirstName = other187.personFirstName;
  personLastName = other187.personLastName;
  gender = other187.gender;
  birthday = other187.birthday;
  creationDate = other187.creationDate;
  locationIp = other187.locationIp;
  browserUsed = other187.browserUsed;
  cityId = other187.cityId;
  languages = other187.languages;
  emails = other187.emails;
  tagIds = other187.tagIds;
  studyAt_id = other187.studyAt_id;
  studyAt_year = other187.studyAt_year;
  workAt_id = other187.workAt_id;
  workAt_year = other187.workAt_year;
  __isset = other187.__isset;
  return *this;
}
void Update1Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Update1Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "personFirstName=" << to_string(personFirstName);
  out << ", " << "personLastName=" << to_string(personLastName);
  out << ", " << "gender=" << to_string(gender);
  out << ", " << "birthday=" << to_string(birthday);
  out << ", " << "creationDate=" << to_string(creationDate);
  out << ", " << "locationIp=" << to_string(locationIp);
  out << ", " << "browserUsed=" << to_string(browserUsed);
  out << ", " << "cityId=" << to_string(cityId);
  out << ", " << "languages=" << to_string(languages);
  out << ", " << "emails=" << to_string(emails);
  out << ", " << "tagIds=" << to_string(tagIds);
  out << ", " << "studyAt_id=" << to_string(studyAt_id);
  out << ", " << "studyAt_year=" << to_string(studyAt_year);
  out << ", " << "workAt_id=" << to_string(workAt_id);
  out << ", " << "workAt_year=" << to_string(workAt_year);
  out << ")";
}


Update2Request::~Update2Request() noexcept {
}


void Update2Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Update2Request::__set_postId(const int64_t val) {
  this->postId = val;
}

void Update2Request::__set_creationDate(const int64_t val) {
  this->creationDate = val;
}
std::ostream& operator<<(std::ostream& out, const Update2Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Update2Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->postId);
          this->__isset.postId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update2Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Update2Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("postId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->postId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update2Request &a, Update2Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.postId, b.postId);
  swap(a.creationDate, b.creationDate);
  swap(a.__isset, b.__isset);
}

Update2Request::Update2Request(const Update2Request& other188) noexcept {
  personId = other188.personId;
  postId = other188.postId;
  creationDate = other188.creationDate;
  __isset = other188.__isset;
}
Update2Request& Update2Request::operator=(const Update2Request& other189) noexcept {
  personId = other189.personId;
  postId = other189.postId;
  creationDate = other189.creationDate;
  __isset = other189.__isset;
  return *this;
}
void Update2Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Update2Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "postId=" << to_string(postId);
  out << ", " << "creationDate=" << to_string(creationDate);
  out << ")";
}


Update3Request::~Update3Request() noexcept {
}


void Update3Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Update3Request::__set_commentId(const int64_t val) {
  this->commentId = val;
}

void Update3Request::__set_creationDate(const int64_t val) {
  this->creationDate = val;
}
std::ostream& operator<<(std::ostream& out, const Update3Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Update3Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentId);
          this->__isset.commentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update3Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Update3Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->commentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update3Request &a, Update3Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.commentId, b.commentId);
  swap(a.creationDate, b.creationDate);
  swap(a.__isset, b.__isset);
}

Update3Request::Update3Request(const Update3Request& other190) noexcept {
  personId = other190.personId;
  commentId = other190.commentId;
  creationDate = other190.creationDate;
  __isset = other190.__isset;
}
Update3Request& Update3Request::operator=(const Update3Request& other191) noexcept {
  personId = other191.personId;
  commentId = other191.commentId;
  creationDate = other191.creationDate;
  __isset = other191.__isset;
  return *this;
}
void Update3Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Update3Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "commentId=" << to_string(commentId);
  out << ", " << "creationDate=" << to_string(creationDate);
  out << ")";
}


Update4Request::~Update4Request() noexcept {
}


void Update4Request::__set_forumId(const int64_t val) {
  this->forumId = val;
}

void Update4Request::__set_forumTitle(const std::string& val) {
  this->forumTitle = val;
}

void Update4Request::__set_creationDate(const int64_t val) {
  this->creationDate = val;
}

void Update4Request::__set_moderatorPersonId(const int64_t val) {
  this->moderatorPersonId = val;
}

void Update4Request::__set_tagIds(const std::vector<int64_t> & val) {
  this->tagIds = val;
}
std::ostream& operator<<(std::ostream& out, const Update4Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Update4Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->forumId);
          this->__isset.forumId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->forumTitle);
          this->__isset.forumTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->moderatorPersonId);
          this->__isset.moderatorPersonId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagIds.clear();
            uint32_t _size192;
            ::apache::thrift::protocol::TType _etype195;
            xfer += iprot->readListBegin(_etype195, _size192);
            this->tagIds.resize(_size192);
            uint32_t _i196;
            for (_i196 = 0; _i196 < _size192; ++_i196)
            {
              xfer += iprot->readI64(this->tagIds[_i196]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update4Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Update4Request");

  xfer += oprot->writeFieldBegin("forumId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->forumId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forumTitle", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->forumTitle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moderatorPersonId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->moderatorPersonId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagIds", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->tagIds.size()));
    std::vector<int64_t> ::const_iterator _iter197;
    for (_iter197 = this->tagIds.begin(); _iter197 != this->tagIds.end(); ++_iter197)
    {
      xfer += oprot->writeI64((*_iter197));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update4Request &a, Update4Request &b) {
  using ::std::swap;
  swap(a.forumId, b.forumId);
  swap(a.forumTitle, b.forumTitle);
  swap(a.creationDate, b.creationDate);
  swap(a.moderatorPersonId, b.moderatorPersonId);
  swap(a.tagIds, b.tagIds);
  swap(a.__isset, b.__isset);
}

Update4Request::Update4Request(const Update4Request& other198) {
  forumId = other198.forumId;
  forumTitle = other198.forumTitle;
  creationDate = other198.creationDate;
  moderatorPersonId = other198.moderatorPersonId;
  tagIds = other198.tagIds;
  __isset = other198.__isset;
}
Update4Request& Update4Request::operator=(const Update4Request& other199) {
  forumId = other199.forumId;
  forumTitle = other199.forumTitle;
  creationDate = other199.creationDate;
  moderatorPersonId = other199.moderatorPersonId;
  tagIds = other199.tagIds;
  __isset = other199.__isset;
  return *this;
}
void Update4Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Update4Request(";
  out << "forumId=" << to_string(forumId);
  out << ", " << "forumTitle=" << to_string(forumTitle);
  out << ", " << "creationDate=" << to_string(creationDate);
  out << ", " << "moderatorPersonId=" << to_string(moderatorPersonId);
  out << ", " << "tagIds=" << to_string(tagIds);
  out << ")";
}


Update5Request::~Update5Request() noexcept {
}


void Update5Request::__set_personId(const int64_t val) {
  this->personId = val;
}

void Update5Request::__set_forumId(const int64_t val) {
  this->forumId = val;
}

void Update5Request::__set_joinDate(const int64_t val) {
  this->joinDate = val;
}
std::ostream& operator<<(std::ostream& out, const Update5Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Update5Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->forumId);
          this->__isset.forumId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->joinDate);
          this->__isset.joinDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update5Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Update5Request");

  xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->personId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forumId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->forumId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("joinDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->joinDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update5Request &a, Update5Request &b) {
  using ::std::swap;
  swap(a.personId, b.personId);
  swap(a.forumId, b.forumId);
  swap(a.joinDate, b.joinDate);
  swap(a.__isset, b.__isset);
}

Update5Request::Update5Request(const Update5Request& other200) noexcept {
  personId = other200.personId;
  forumId = other200.forumId;
  joinDate = other200.joinDate;
  __isset = other200.__isset;
}
Update5Request& Update5Request::operator=(const Update5Request& other201) noexcept {
  personId = other201.personId;
  forumId = other201.forumId;
  joinDate = other201.joinDate;
  __isset = other201.__isset;
  return *this;
}
void Update5Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Update5Request(";
  out << "personId=" << to_string(personId);
  out << ", " << "forumId=" << to_string(forumId);
  out << ", " << "joinDate=" << to_string(joinDate);
  out << ")";
}


Update6Request::~Update6Request() noexcept {
}


void Update6Request::__set_postId(const int64_t val) {
  this->postId = val;
}

void Update6Request::__set_imageFile(const std::string& val) {
  this->imageFile = val;
}

void Update6Request::__set_creationDate(const int64_t val) {
  this->creationDate = val;
}

void Update6Request::__set_locationIp(const std::string& val) {
  this->locationIp = val;
}

void Update6Request::__set_browserUsed(const std::string& val) {
  this->browserUsed = val;
}

void Update6Request::__set_language(const std::string& val) {
  this->language = val;
}

void Update6Request::__set_content(const std::string& val) {
  this->content = val;
}

void Update6Request::__set_length(const int32_t val) {
  this->length = val;
}

void Update6Request::__set_authorPersonId(const int64_t val) {
  this->authorPersonId = val;
}

void Update6Request::__set_forumId(const int64_t val) {
  this->forumId = val;
}

void Update6Request::__set_countryId(const int64_t val) {
  this->countryId = val;
}

void Update6Request::__set_tagIds(const std::vector<int64_t> & val) {
  this->tagIds = val;
}
std::ostream& operator<<(std::ostream& out, const Update6Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Update6Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->postId);
          this->__isset.postId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageFile);
          this->__isset.imageFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationIp);
          this->__isset.locationIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->browserUsed);
          this->__isset.browserUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->authorPersonId);
          this->__isset.authorPersonId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->forumId);
          this->__isset.forumId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->countryId);
          this->__isset.countryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagIds.clear();
            uint32_t _size202;
            ::apache::thrift::protocol::TType _etype205;
            xfer += iprot->readListBegin(_etype205, _size202);
            this->tagIds.resize(_size202);
            uint32_t _i206;
            for (_i206 = 0; _i206 < _size202; ++_i206)
            {
              xfer += iprot->readI64(this->tagIds[_i206]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update6Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Update6Request");

  xfer += oprot->writeFieldBegin("postId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->postId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imageFile", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->imageFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locationIp", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->locationIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("browserUsed", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->browserUsed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorPersonId", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->authorPersonId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forumId", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->forumId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countryId", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->countryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagIds", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->tagIds.size()));
    std::vector<int64_t> ::const_iterator _iter207;
    for (_iter207 = this->tagIds.begin(); _iter207 != this->tagIds.end(); ++_iter207)
    {
      xfer += oprot->writeI64((*_iter207));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update6Request &a, Update6Request &b) {
  using ::std::swap;
  swap(a.postId, b.postId);
  swap(a.imageFile, b.imageFile);
  swap(a.creationDate, b.creationDate);
  swap(a.locationIp, b.locationIp);
  swap(a.browserUsed, b.browserUsed);
  swap(a.language, b.language);
  swap(a.content, b.content);
  swap(a.length, b.length);
  swap(a.authorPersonId, b.authorPersonId);
  swap(a.forumId, b.forumId);
  swap(a.countryId, b.countryId);
  swap(a.tagIds, b.tagIds);
  swap(a.__isset, b.__isset);
}

Update6Request::Update6Request(const Update6Request& other208) {
  postId = other208.postId;
  imageFile = other208.imageFile;
  creationDate = other208.creationDate;
  locationIp = other208.locationIp;
  browserUsed = other208.browserUsed;
  language = other208.language;
  content = other208.content;
  length = other208.length;
  authorPersonId = other208.authorPersonId;
  forumId = other208.forumId;
  countryId = other208.countryId;
  tagIds = other208.tagIds;
  __isset = other208.__isset;
}
Update6Request& Update6Request::operator=(const Update6Request& other209) {
  postId = other209.postId;
  imageFile = other209.imageFile;
  creationDate = other209.creationDate;
  locationIp = other209.locationIp;
  browserUsed = other209.browserUsed;
  language = other209.language;
  content = other209.content;
  length = other209.length;
  authorPersonId = other209.authorPersonId;
  forumId = other209.forumId;
  countryId = other209.countryId;
  tagIds = other209.tagIds;
  __isset = other209.__isset;
  return *this;
}
void Update6Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Update6Request(";
  out << "postId=" << to_string(postId);
  out << ", " << "imageFile=" << to_string(imageFile);
  out << ", " << "creationDate=" << to_string(creationDate);
  out << ", " << "locationIp=" << to_string(locationIp);
  out << ", " << "browserUsed=" << to_string(browserUsed);
  out << ", " << "language=" << to_string(language);
  out << ", " << "content=" << to_string(content);
  out << ", " << "length=" << to_string(length);
  out << ", " << "authorPersonId=" << to_string(authorPersonId);
  out << ", " << "forumId=" << to_string(forumId);
  out << ", " << "countryId=" << to_string(countryId);
  out << ", " << "tagIds=" << to_string(tagIds);
  out << ")";
}


Update7Request::~Update7Request() noexcept {
}


void Update7Request::__set_commentId(const int64_t val) {
  this->commentId = val;
}

void Update7Request::__set_creationDate(const int64_t val) {
  this->creationDate = val;
}

void Update7Request::__set_locationIp(const std::string& val) {
  this->locationIp = val;
}

void Update7Request::__set_browserUsed(const std::string& val) {
  this->browserUsed = val;
}

void Update7Request::__set_content(const std::string& val) {
  this->content = val;
}

void Update7Request::__set_length(const int32_t val) {
  this->length = val;
}

void Update7Request::__set_authorPersonId(const int64_t val) {
  this->authorPersonId = val;
}

void Update7Request::__set_countryId(const int64_t val) {
  this->countryId = val;
}

void Update7Request::__set_replyToPostId(const int64_t val) {
  this->replyToPostId = val;
}

void Update7Request::__set_replyToCommentId(const int64_t val) {
  this->replyToCommentId = val;
}

void Update7Request::__set_tagIds(const std::vector<int64_t> & val) {
  this->tagIds = val;
}
std::ostream& operator<<(std::ostream& out, const Update7Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Update7Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentId);
          this->__isset.commentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationIp);
          this->__isset.locationIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->browserUsed);
          this->__isset.browserUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->authorPersonId);
          this->__isset.authorPersonId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->countryId);
          this->__isset.countryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->replyToPostId);
          this->__isset.replyToPostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->replyToCommentId);
          this->__isset.replyToCommentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagIds.clear();
            uint32_t _size210;
            ::apache::thrift::protocol::TType _etype213;
            xfer += iprot->readListBegin(_etype213, _size210);
            this->tagIds.resize(_size210);
            uint32_t _i214;
            for (_i214 = 0; _i214 < _size210; ++_i214)
            {
              xfer += iprot->readI64(this->tagIds[_i214]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update7Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Update7Request");

  xfer += oprot->writeFieldBegin("commentId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->commentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locationIp", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->locationIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("browserUsed", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->browserUsed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorPersonId", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->authorPersonId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countryId", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->countryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyToPostId", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->replyToPostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyToCommentId", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->replyToCommentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagIds", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->tagIds.size()));
    std::vector<int64_t> ::const_iterator _iter215;
    for (_iter215 = this->tagIds.begin(); _iter215 != this->tagIds.end(); ++_iter215)
    {
      xfer += oprot->writeI64((*_iter215));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update7Request &a, Update7Request &b) {
  using ::std::swap;
  swap(a.commentId, b.commentId);
  swap(a.creationDate, b.creationDate);
  swap(a.locationIp, b.locationIp);
  swap(a.browserUsed, b.browserUsed);
  swap(a.content, b.content);
  swap(a.length, b.length);
  swap(a.authorPersonId, b.authorPersonId);
  swap(a.countryId, b.countryId);
  swap(a.replyToPostId, b.replyToPostId);
  swap(a.replyToCommentId, b.replyToCommentId);
  swap(a.tagIds, b.tagIds);
  swap(a.__isset, b.__isset);
}

Update7Request::Update7Request(const Update7Request& other216) {
  commentId = other216.commentId;
  creationDate = other216.creationDate;
  locationIp = other216.locationIp;
  browserUsed = other216.browserUsed;
  content = other216.content;
  length = other216.length;
  authorPersonId = other216.authorPersonId;
  countryId = other216.countryId;
  replyToPostId = other216.replyToPostId;
  replyToCommentId = other216.replyToCommentId;
  tagIds = other216.tagIds;
  __isset = other216.__isset;
}
Update7Request& Update7Request::operator=(const Update7Request& other217) {
  commentId = other217.commentId;
  creationDate = other217.creationDate;
  locationIp = other217.locationIp;
  browserUsed = other217.browserUsed;
  content = other217.content;
  length = other217.length;
  authorPersonId = other217.authorPersonId;
  countryId = other217.countryId;
  replyToPostId = other217.replyToPostId;
  replyToCommentId = other217.replyToCommentId;
  tagIds = other217.tagIds;
  __isset = other217.__isset;
  return *this;
}
void Update7Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Update7Request(";
  out << "commentId=" << to_string(commentId);
  out << ", " << "creationDate=" << to_string(creationDate);
  out << ", " << "locationIp=" << to_string(locationIp);
  out << ", " << "browserUsed=" << to_string(browserUsed);
  out << ", " << "content=" << to_string(content);
  out << ", " << "length=" << to_string(length);
  out << ", " << "authorPersonId=" << to_string(authorPersonId);
  out << ", " << "countryId=" << to_string(countryId);
  out << ", " << "replyToPostId=" << to_string(replyToPostId);
  out << ", " << "replyToCommentId=" << to_string(replyToCommentId);
  out << ", " << "tagIds=" << to_string(tagIds);
  out << ")";
}


Update8Request::~Update8Request() noexcept {
}


void Update8Request::__set_person1Id(const int64_t val) {
  this->person1Id = val;
}

void Update8Request::__set_person2Id(const int64_t val) {
  this->person2Id = val;
}

void Update8Request::__set_creationDate(const int64_t val) {
  this->creationDate = val;
}
std::ostream& operator<<(std::ostream& out, const Update8Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Update8Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->person1Id);
          this->__isset.person1Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->person2Id);
          this->__isset.person2Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update8Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Update8Request");

  xfer += oprot->writeFieldBegin("person1Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->person1Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person2Id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->person2Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update8Request &a, Update8Request &b) {
  using ::std::swap;
  swap(a.person1Id, b.person1Id);
  swap(a.person2Id, b.person2Id);
  swap(a.creationDate, b.creationDate);
  swap(a.__isset, b.__isset);
}

Update8Request::Update8Request(const Update8Request& other218) noexcept {
  person1Id = other218.person1Id;
  person2Id = other218.person2Id;
  creationDate = other218.creationDate;
  __isset = other218.__isset;
}
Update8Request& Update8Request::operator=(const Update8Request& other219) noexcept {
  person1Id = other219.person1Id;
  person2Id = other219.person2Id;
  creationDate = other219.creationDate;
  __isset = other219.__isset;
  return *this;
}
void Update8Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Update8Request(";
  out << "person1Id=" << to_string(person1Id);
  out << ", " << "person2Id=" << to_string(person2Id);
  out << ", " << "creationDate=" << to_string(creationDate);
  out << ")";
}

} // namespace
